"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/valibot";
exports.ids = ["vendor-chunks/valibot"];
exports.modules = {

/***/ "(rsc)/../../node_modules/valibot/dist/index.js":
/*!************************************************!*\
  !*** ../../node_modules/valibot/dist/index.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BIC_REGEX: () => (/* binding */ BIC_REGEX),\n/* harmony export */   BrandSymbol: () => (/* binding */ BrandSymbol),\n/* harmony export */   CUID2_REGEX: () => (/* binding */ CUID2_REGEX),\n/* harmony export */   DECIMAL_REGEX: () => (/* binding */ DECIMAL_REGEX),\n/* harmony export */   EMAIL_REGEX: () => (/* binding */ EMAIL_REGEX),\n/* harmony export */   EMOJI_REGEX: () => (/* binding */ EMOJI_REGEX),\n/* harmony export */   HEXADECIMAL_REGEX: () => (/* binding */ HEXADECIMAL_REGEX),\n/* harmony export */   HEX_COLOR_REGEX: () => (/* binding */ HEX_COLOR_REGEX),\n/* harmony export */   IMEI_REGEX: () => (/* binding */ IMEI_REGEX),\n/* harmony export */   IPV4_REGEX: () => (/* binding */ IPV4_REGEX),\n/* harmony export */   IPV6_REGEX: () => (/* binding */ IPV6_REGEX),\n/* harmony export */   ISO_DATE_REGEX: () => (/* binding */ ISO_DATE_REGEX),\n/* harmony export */   ISO_DATE_TIME_REGEX: () => (/* binding */ ISO_DATE_TIME_REGEX),\n/* harmony export */   ISO_TIMESTAMP_REGEX: () => (/* binding */ ISO_TIMESTAMP_REGEX),\n/* harmony export */   ISO_TIME_REGEX: () => (/* binding */ ISO_TIME_REGEX),\n/* harmony export */   ISO_TIME_SECOND_REGEX: () => (/* binding */ ISO_TIME_SECOND_REGEX),\n/* harmony export */   ISO_WEEK_REGEX: () => (/* binding */ ISO_WEEK_REGEX),\n/* harmony export */   MAC48_REGEX: () => (/* binding */ MAC48_REGEX),\n/* harmony export */   MAC64_REGEX: () => (/* binding */ MAC64_REGEX),\n/* harmony export */   OCTAL_REGEX: () => (/* binding */ OCTAL_REGEX),\n/* harmony export */   ULID_REGEX: () => (/* binding */ ULID_REGEX),\n/* harmony export */   UUID_REGEX: () => (/* binding */ UUID_REGEX),\n/* harmony export */   ValiError: () => (/* binding */ ValiError),\n/* harmony export */   actionIssue: () => (/* binding */ actionIssue),\n/* harmony export */   actionOutput: () => (/* binding */ actionOutput),\n/* harmony export */   any: () => (/* binding */ any),\n/* harmony export */   anyAsync: () => (/* binding */ anyAsync),\n/* harmony export */   array: () => (/* binding */ array),\n/* harmony export */   arrayAsync: () => (/* binding */ arrayAsync),\n/* harmony export */   bic: () => (/* binding */ bic),\n/* harmony export */   bigint: () => (/* binding */ bigint),\n/* harmony export */   bigintAsync: () => (/* binding */ bigintAsync),\n/* harmony export */   blob: () => (/* binding */ blob),\n/* harmony export */   blobAsync: () => (/* binding */ blobAsync),\n/* harmony export */   boolean: () => (/* binding */ boolean),\n/* harmony export */   booleanAsync: () => (/* binding */ booleanAsync),\n/* harmony export */   brand: () => (/* binding */ brand),\n/* harmony export */   bytes: () => (/* binding */ bytes),\n/* harmony export */   coerce: () => (/* binding */ coerce),\n/* harmony export */   coerceAsync: () => (/* binding */ coerceAsync),\n/* harmony export */   creditCard: () => (/* binding */ creditCard),\n/* harmony export */   cuid2: () => (/* binding */ cuid2),\n/* harmony export */   custom: () => (/* binding */ custom),\n/* harmony export */   customAsync: () => (/* binding */ customAsync),\n/* harmony export */   date: () => (/* binding */ date),\n/* harmony export */   dateAsync: () => (/* binding */ dateAsync),\n/* harmony export */   decimal: () => (/* binding */ decimal),\n/* harmony export */   defaultArgs: () => (/* binding */ defaultArgs),\n/* harmony export */   discriminatedUnion: () => (/* binding */ discriminatedUnion),\n/* harmony export */   discriminatedUnionAsync: () => (/* binding */ discriminatedUnionAsync),\n/* harmony export */   email: () => (/* binding */ email),\n/* harmony export */   emoji: () => (/* binding */ emoji),\n/* harmony export */   endsWith: () => (/* binding */ endsWith),\n/* harmony export */   enumAsync: () => (/* binding */ enumAsync),\n/* harmony export */   enumType: () => (/* binding */ enumType),\n/* harmony export */   enumTypeAsync: () => (/* binding */ enumTypeAsync),\n/* harmony export */   enum_: () => (/* binding */ enum_),\n/* harmony export */   equal: () => (/* binding */ equal),\n/* harmony export */   excludes: () => (/* binding */ excludes),\n/* harmony export */   fallback: () => (/* binding */ fallback),\n/* harmony export */   fallbackAsync: () => (/* binding */ fallbackAsync),\n/* harmony export */   finite: () => (/* binding */ finite),\n/* harmony export */   flatten: () => (/* binding */ flatten),\n/* harmony export */   forward: () => (/* binding */ forward),\n/* harmony export */   getDefault: () => (/* binding */ getDefault),\n/* harmony export */   getDefaultAsync: () => (/* binding */ getDefaultAsync),\n/* harmony export */   getDefaults: () => (/* binding */ getDefaults),\n/* harmony export */   getDefaultsAsync: () => (/* binding */ getDefaultsAsync),\n/* harmony export */   getFallback: () => (/* binding */ getFallback),\n/* harmony export */   getFallbackAsync: () => (/* binding */ getFallbackAsync),\n/* harmony export */   getFallbacks: () => (/* binding */ getFallbacks),\n/* harmony export */   getFallbacksAsync: () => (/* binding */ getFallbacksAsync),\n/* harmony export */   hexColor: () => (/* binding */ hexColor),\n/* harmony export */   hexadecimal: () => (/* binding */ hexadecimal),\n/* harmony export */   imei: () => (/* binding */ imei),\n/* harmony export */   includes: () => (/* binding */ includes),\n/* harmony export */   instance: () => (/* binding */ instance),\n/* harmony export */   instanceAsync: () => (/* binding */ instanceAsync),\n/* harmony export */   integer: () => (/* binding */ integer),\n/* harmony export */   intersect: () => (/* binding */ intersect),\n/* harmony export */   intersection: () => (/* binding */ intersection),\n/* harmony export */   ip: () => (/* binding */ ip),\n/* harmony export */   ipv4: () => (/* binding */ ipv4),\n/* harmony export */   ipv6: () => (/* binding */ ipv6),\n/* harmony export */   is: () => (/* binding */ is),\n/* harmony export */   isLuhnAlgo: () => (/* binding */ isLuhnAlgo),\n/* harmony export */   isoDate: () => (/* binding */ isoDate),\n/* harmony export */   isoDateTime: () => (/* binding */ isoDateTime),\n/* harmony export */   isoTime: () => (/* binding */ isoTime),\n/* harmony export */   isoTimeSecond: () => (/* binding */ isoTimeSecond),\n/* harmony export */   isoTimestamp: () => (/* binding */ isoTimestamp),\n/* harmony export */   isoWeek: () => (/* binding */ isoWeek),\n/* harmony export */   keyof: () => (/* binding */ keyof),\n/* harmony export */   length: () => (/* binding */ length),\n/* harmony export */   literal: () => (/* binding */ literal),\n/* harmony export */   literalAsync: () => (/* binding */ literalAsync),\n/* harmony export */   mac: () => (/* binding */ mac),\n/* harmony export */   mac48: () => (/* binding */ mac48),\n/* harmony export */   mac64: () => (/* binding */ mac64),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   mapAsync: () => (/* binding */ mapAsync),\n/* harmony export */   maxBytes: () => (/* binding */ maxBytes),\n/* harmony export */   maxLength: () => (/* binding */ maxLength),\n/* harmony export */   maxRange: () => (/* binding */ maxRange),\n/* harmony export */   maxSize: () => (/* binding */ maxSize),\n/* harmony export */   maxValue: () => (/* binding */ maxValue),\n/* harmony export */   merge: () => (/* binding */ merge),\n/* harmony export */   mergeAsync: () => (/* binding */ mergeAsync),\n/* harmony export */   mimeType: () => (/* binding */ mimeType),\n/* harmony export */   minBytes: () => (/* binding */ minBytes),\n/* harmony export */   minLength: () => (/* binding */ minLength),\n/* harmony export */   minRange: () => (/* binding */ minRange),\n/* harmony export */   minSize: () => (/* binding */ minSize),\n/* harmony export */   minValue: () => (/* binding */ minValue),\n/* harmony export */   multipleOf: () => (/* binding */ multipleOf),\n/* harmony export */   nan: () => (/* binding */ nan),\n/* harmony export */   nanAsync: () => (/* binding */ nanAsync),\n/* harmony export */   nativeEnum: () => (/* binding */ nativeEnum),\n/* harmony export */   nativeEnumAsync: () => (/* binding */ nativeEnumAsync),\n/* harmony export */   never: () => (/* binding */ never),\n/* harmony export */   neverAsync: () => (/* binding */ neverAsync),\n/* harmony export */   nonNullable: () => (/* binding */ nonNullable),\n/* harmony export */   nonNullableAsync: () => (/* binding */ nonNullableAsync),\n/* harmony export */   nonNullish: () => (/* binding */ nonNullish),\n/* harmony export */   nonNullishAsync: () => (/* binding */ nonNullishAsync),\n/* harmony export */   nonOptional: () => (/* binding */ nonOptional),\n/* harmony export */   nonOptionalAsync: () => (/* binding */ nonOptionalAsync),\n/* harmony export */   notBytes: () => (/* binding */ notBytes),\n/* harmony export */   notLength: () => (/* binding */ notLength),\n/* harmony export */   notSize: () => (/* binding */ notSize),\n/* harmony export */   notValue: () => (/* binding */ notValue),\n/* harmony export */   nullAsync: () => (/* binding */ nullAsync),\n/* harmony export */   nullType: () => (/* binding */ nullType),\n/* harmony export */   nullTypeAsync: () => (/* binding */ nullTypeAsync),\n/* harmony export */   null_: () => (/* binding */ null_),\n/* harmony export */   nullable: () => (/* binding */ nullable),\n/* harmony export */   nullableAsync: () => (/* binding */ nullableAsync),\n/* harmony export */   nullish: () => (/* binding */ nullish),\n/* harmony export */   nullishAsync: () => (/* binding */ nullishAsync),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   numberAsync: () => (/* binding */ numberAsync),\n/* harmony export */   object: () => (/* binding */ object),\n/* harmony export */   objectAsync: () => (/* binding */ objectAsync),\n/* harmony export */   octal: () => (/* binding */ octal),\n/* harmony export */   omit: () => (/* binding */ omit),\n/* harmony export */   omitAsync: () => (/* binding */ omitAsync),\n/* harmony export */   optional: () => (/* binding */ optional),\n/* harmony export */   optionalAsync: () => (/* binding */ optionalAsync),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   parseAsync: () => (/* binding */ parseAsync),\n/* harmony export */   parseResult: () => (/* binding */ parseResult),\n/* harmony export */   partial: () => (/* binding */ partial),\n/* harmony export */   partialAsync: () => (/* binding */ partialAsync),\n/* harmony export */   passthrough: () => (/* binding */ passthrough),\n/* harmony export */   passthroughAsync: () => (/* binding */ passthroughAsync),\n/* harmony export */   pick: () => (/* binding */ pick),\n/* harmony export */   pickAsync: () => (/* binding */ pickAsync),\n/* harmony export */   picklist: () => (/* binding */ picklist),\n/* harmony export */   picklistAsync: () => (/* binding */ picklistAsync),\n/* harmony export */   pipeResult: () => (/* binding */ pipeResult),\n/* harmony export */   pipeResultAsync: () => (/* binding */ pipeResultAsync),\n/* harmony export */   record: () => (/* binding */ record),\n/* harmony export */   recordAsync: () => (/* binding */ recordAsync),\n/* harmony export */   recursive: () => (/* binding */ recursive),\n/* harmony export */   recursiveAsync: () => (/* binding */ recursiveAsync),\n/* harmony export */   regex: () => (/* binding */ regex),\n/* harmony export */   required: () => (/* binding */ required),\n/* harmony export */   requiredAsync: () => (/* binding */ requiredAsync),\n/* harmony export */   restAndDefaultArgs: () => (/* binding */ restAndDefaultArgs),\n/* harmony export */   safeInteger: () => (/* binding */ safeInteger),\n/* harmony export */   safeParse: () => (/* binding */ safeParse),\n/* harmony export */   safeParseAsync: () => (/* binding */ safeParseAsync),\n/* harmony export */   schemaIssue: () => (/* binding */ schemaIssue),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   setAsync: () => (/* binding */ setAsync),\n/* harmony export */   size: () => (/* binding */ size),\n/* harmony export */   special: () => (/* binding */ special),\n/* harmony export */   specialAsync: () => (/* binding */ specialAsync),\n/* harmony export */   startsWith: () => (/* binding */ startsWith),\n/* harmony export */   strict: () => (/* binding */ strict),\n/* harmony export */   strictAsync: () => (/* binding */ strictAsync),\n/* harmony export */   string: () => (/* binding */ string),\n/* harmony export */   stringAsync: () => (/* binding */ stringAsync),\n/* harmony export */   strip: () => (/* binding */ strip),\n/* harmony export */   stripAsync: () => (/* binding */ stripAsync),\n/* harmony export */   symbol: () => (/* binding */ symbol),\n/* harmony export */   symbolAsync: () => (/* binding */ symbolAsync),\n/* harmony export */   toCustom: () => (/* binding */ toCustom),\n/* harmony export */   toCustomAsync: () => (/* binding */ toCustomAsync),\n/* harmony export */   toLowerCase: () => (/* binding */ toLowerCase),\n/* harmony export */   toMaxValue: () => (/* binding */ toMaxValue),\n/* harmony export */   toMinValue: () => (/* binding */ toMinValue),\n/* harmony export */   toTrimmed: () => (/* binding */ toTrimmed),\n/* harmony export */   toTrimmedEnd: () => (/* binding */ toTrimmedEnd),\n/* harmony export */   toTrimmedStart: () => (/* binding */ toTrimmedStart),\n/* harmony export */   toUpperCase: () => (/* binding */ toUpperCase),\n/* harmony export */   transform: () => (/* binding */ transform),\n/* harmony export */   transformAsync: () => (/* binding */ transformAsync),\n/* harmony export */   tuple: () => (/* binding */ tuple),\n/* harmony export */   tupleAsync: () => (/* binding */ tupleAsync),\n/* harmony export */   ulid: () => (/* binding */ ulid),\n/* harmony export */   undefinedAsync: () => (/* binding */ undefinedAsync),\n/* harmony export */   undefinedType: () => (/* binding */ undefinedType),\n/* harmony export */   undefinedTypeAsync: () => (/* binding */ undefinedTypeAsync),\n/* harmony export */   undefined_: () => (/* binding */ undefined_),\n/* harmony export */   union: () => (/* binding */ union),\n/* harmony export */   unionAsync: () => (/* binding */ unionAsync),\n/* harmony export */   unknown: () => (/* binding */ unknown),\n/* harmony export */   unknownAsync: () => (/* binding */ unknownAsync),\n/* harmony export */   unwrap: () => (/* binding */ unwrap),\n/* harmony export */   url: () => (/* binding */ url),\n/* harmony export */   useDefault: () => (/* binding */ useDefault),\n/* harmony export */   uuid: () => (/* binding */ uuid),\n/* harmony export */   value: () => (/* binding */ value),\n/* harmony export */   variant: () => (/* binding */ variant),\n/* harmony export */   variantAsync: () => (/* binding */ variantAsync),\n/* harmony export */   voidAsync: () => (/* binding */ voidAsync),\n/* harmony export */   voidType: () => (/* binding */ voidType),\n/* harmony export */   voidTypeAsync: () => (/* binding */ voidTypeAsync),\n/* harmony export */   void_: () => (/* binding */ void_),\n/* harmony export */   withDefault: () => (/* binding */ withDefault)\n/* harmony export */ });\n// src/error/flatten/flatten.ts\nfunction flatten(arg1) {\n  return (Array.isArray(arg1) ? arg1 : arg1.issues).reduce(\n    (flatErrors, issue) => {\n      if (issue.path) {\n        if (issue.path.every(\n          ({ key }) => typeof key === \"string\" || typeof key === \"number\"\n        )) {\n          const path = issue.path.map(({ key }) => key).join(\".\");\n          if (flatErrors.nested[path]) {\n            flatErrors.nested[path].push(issue.message);\n          } else {\n            flatErrors.nested[path] = [issue.message];\n          }\n        }\n      } else {\n        if (flatErrors.root) {\n          flatErrors.root.push(issue.message);\n        } else {\n          flatErrors.root = [issue.message];\n        }\n      }\n      return flatErrors;\n    },\n    { nested: {} }\n  );\n}\n\n// src/error/ValiError/ValiError.ts\nvar ValiError = class extends Error {\n  issues;\n  /**\n   * Creates a Valibot error with useful information.\n   *\n   * @param issues The error issues.\n   */\n  constructor(issues) {\n    super(issues[0].message);\n    this.name = \"ValiError\";\n    this.issues = issues;\n  }\n};\n\n// src/methods/brand/brand.ts\nvar BrandSymbol = Symbol(\"brand\");\nfunction brand(schema, name) {\n  return schema;\n}\n\n// src/methods/coerce/coerce.ts\nfunction coerce(schema, action) {\n  return {\n    ...schema,\n    _parse(input, info) {\n      return schema._parse(action(input), info);\n    }\n  };\n}\n\n// src/methods/coerce/coerceAsync.ts\nfunction coerceAsync(schema, action) {\n  return {\n    ...schema,\n    async _parse(input, info) {\n      return schema._parse(await action(input), info);\n    }\n  };\n}\n\n// src/utils/errorMessage/errorMessage.ts\nfunction errorMessage(message) {\n  return typeof message === \"function\" ? message() : message;\n}\n\n// src/utils/actionIssue/actionIssue.ts\nfunction actionIssue(validation, message, input, requirement, path) {\n  return {\n    issues: [\n      {\n        validation,\n        message: errorMessage(message),\n        input,\n        requirement,\n        path\n      }\n    ]\n  };\n}\n\n// src/utils/actionOutput/actionOutput.ts\nfunction actionOutput(output) {\n  return { output };\n}\n\n// src/utils/defaultArgs/defaultArgs.ts\nfunction defaultArgs(arg1, arg2) {\n  return Array.isArray(arg1) ? [void 0, arg1] : [arg1, arg2];\n}\n\n// src/utils/parseResult/parseResult.ts\nfunction parseResult(typed, output, issues) {\n  return { typed, output, issues };\n}\n\n// src/utils/restAndDefaultArgs/restAndDefaultArgs.ts\nfunction restAndDefaultArgs(arg1, arg2, arg3) {\n  if (!arg1 || typeof arg1 === \"object\" && !Array.isArray(arg1)) {\n    const [error2, pipe2] = defaultArgs(arg2, arg3);\n    return [arg1, error2, pipe2];\n  }\n  const [error, pipe] = defaultArgs(\n    arg1,\n    arg2\n  );\n  return [void 0, error, pipe];\n}\n\n// src/utils/isLuhnAlgo/isLuhnAlgo.ts\nvar NON_DIGIT_REGEX = /\\D/gu;\nfunction isLuhnAlgo(input) {\n  const number2 = input.replace(NON_DIGIT_REGEX, \"\");\n  let length2 = number2.length;\n  let bit = 1;\n  let sum = 0;\n  while (length2) {\n    const value2 = +number2[--length2];\n    bit ^= 1;\n    sum += bit ? [0, 2, 4, 6, 8, 1, 3, 5, 7, 9][value2] : value2;\n  }\n  return sum % 10 === 0;\n}\n\n// src/utils/pipeResult/utils/pipeIssue/pipeIssue.ts\nfunction pipeIssue(info, issue) {\n  return {\n    reason: info?.reason,\n    validation: issue.validation,\n    origin: info?.origin || \"value\",\n    message: issue.message,\n    input: issue.input,\n    requirement: issue?.requirement,\n    path: issue.path,\n    abortEarly: info?.abortEarly,\n    abortPipeEarly: info?.abortPipeEarly,\n    skipPipe: info?.skipPipe\n  };\n}\n\n// src/utils/pipeResult/utils/pipeInfo/pipeInfo.ts\nfunction pipeInfo(info, reason) {\n  return {\n    reason,\n    origin: info?.origin,\n    abortEarly: info?.abortEarly,\n    abortPipeEarly: info?.abortPipeEarly,\n    skipPipe: info?.skipPipe\n  };\n}\n\n// src/utils/pipeResult/pipeResult.ts\nfunction pipeResult(input, pipe, parseInfo, reason, issues) {\n  let info;\n  let output = input;\n  if (pipe?.length && !parseInfo?.skipPipe) {\n    for (const action of pipe) {\n      const result = action._parse(output);\n      if (result.issues) {\n        info = info || pipeInfo(parseInfo, reason);\n        for (const issueInfo of result.issues) {\n          const issue = pipeIssue(info, issueInfo);\n          issues ? issues.push(issue) : issues = [issue];\n        }\n        if (info.abortEarly || info.abortPipeEarly) {\n          break;\n        }\n      } else {\n        output = result.output;\n      }\n    }\n  }\n  return parseResult(true, output, issues);\n}\n\n// src/utils/pipeResult/pipeResultAsync.ts\nasync function pipeResultAsync(input, pipe, parseInfo, reason, issues) {\n  let info;\n  let output = input;\n  if (pipe?.length && !parseInfo?.skipPipe) {\n    for (const action of pipe) {\n      const result = await action._parse(output);\n      if (result.issues) {\n        info = info || pipeInfo(parseInfo, reason);\n        for (const issueInfo of result.issues) {\n          const issue = pipeIssue(info, issueInfo);\n          issues ? issues.push(issue) : issues = [issue];\n        }\n        if (info.abortEarly || info.abortPipeEarly) {\n          break;\n        }\n      } else {\n        output = result.output;\n      }\n    }\n  }\n  return parseResult(true, output, issues);\n}\n\n// src/utils/schemaIssue/schemaIssue.ts\nfunction schemaIssue(info, reason, validation, message, input, path, issues) {\n  return {\n    typed: false,\n    output: input,\n    issues: [\n      {\n        reason,\n        validation,\n        origin: info?.origin || \"value\",\n        message: errorMessage(message),\n        input,\n        path,\n        issues,\n        abortEarly: info?.abortEarly,\n        abortPipeEarly: info?.abortPipeEarly,\n        skipPipe: info?.skipPipe\n      }\n    ]\n  };\n}\n\n// src/methods/getFallback/getFallback.ts\nfunction getFallback(schema, info) {\n  return typeof schema.fallback === \"function\" ? schema.fallback(info) : schema.fallback;\n}\n\n// src/methods/getFallback/getFallbackAsync.ts\nasync function getFallbackAsync(schema, info) {\n  return typeof schema.fallback === \"function\" ? await schema.fallback(info) : schema.fallback;\n}\n\n// src/methods/fallback/fallback.ts\nfunction fallback(schema, fallback2) {\n  return {\n    ...schema,\n    fallback: fallback2,\n    _parse(input, info) {\n      const result = schema._parse(input, info);\n      return result.issues ? parseResult(true, getFallback(this, { input, issues: result.issues })) : result;\n    }\n  };\n}\n\n// src/methods/fallback/fallbackAsync.ts\nfunction fallbackAsync(schema, fallback2) {\n  return {\n    ...schema,\n    fallback: fallback2,\n    async _parse(input, info) {\n      const result = await schema._parse(input, info);\n      return result.issues ? parseResult(\n        true,\n        await getFallbackAsync(this, { input, issues: result.issues })\n      ) : result;\n    }\n  };\n}\n\n// src/methods/forward/forward.ts\nfunction forward(validation, pathList) {\n  return {\n    ...validation,\n    _parse(input) {\n      const result = validation._parse(input);\n      if (result.issues) {\n        for (const issue of result.issues) {\n          let pathInput = input;\n          for (const key of pathList) {\n            const pathValue = pathInput[key];\n            issue.input = pathValue;\n            const pathItem = {\n              type: \"unknown\",\n              input: pathInput,\n              key,\n              value: pathValue\n            };\n            issue.path ? issue.path.push(pathItem) : issue.path = [pathItem];\n            if (!pathValue) {\n              break;\n            }\n            pathInput = pathValue;\n          }\n        }\n      }\n      return result;\n    }\n  };\n}\n\n// src/methods/getDefault/getDefault.ts\nfunction getDefault(schema) {\n  return typeof schema.default === \"function\" ? schema.default() : schema.default;\n}\n\n// src/methods/getDefault/getDefaultAsync.ts\nasync function getDefaultAsync(schema) {\n  return typeof schema.default === \"function\" ? await schema.default() : schema.default;\n}\n\n// src/methods/getDefaults/getDefaults.ts\nfunction getDefaults(schema) {\n  let defaults;\n  if (schema.default) {\n    defaults = getDefault(schema);\n  } else if (\"type\" in schema) {\n    if (schema.type === \"object\") {\n      defaults = {};\n      for (const key in schema.entries) {\n        defaults[key] = getDefaults(schema.entries[key]);\n      }\n    } else if (schema.type === \"tuple\") {\n      defaults = [];\n      for (let key = 0; key < schema.items.length; key++) {\n        defaults.push(getDefaults(schema.items[key]));\n      }\n    }\n  }\n  return defaults;\n}\n\n// src/methods/getDefaults/getDefaultsAsync.ts\nasync function getDefaultsAsync(schema) {\n  let defaults;\n  if (schema.default) {\n    defaults = await getDefaultAsync(schema);\n  } else if (\"type\" in schema) {\n    if (schema.type === \"object\") {\n      defaults = {};\n      for (const key in schema.entries) {\n        defaults[key] = await getDefaultsAsync(schema.entries[key]);\n      }\n    } else if (schema.type === \"tuple\") {\n      defaults = [];\n      for (let key = 0; key < schema.items.length; key++) {\n        defaults.push(await getDefaultsAsync(schema.items[key]));\n      }\n    }\n  }\n  return defaults;\n}\n\n// src/methods/getFallbacks/getFallbacks.ts\nfunction getFallbacks(schema) {\n  let fallbacks;\n  if (schema.fallback) {\n    fallbacks = getFallback(schema);\n  } else if (\"type\" in schema) {\n    if (schema.type === \"object\") {\n      fallbacks = {};\n      for (const key in schema.entries) {\n        fallbacks[key] = getFallbacks(schema.entries[key]);\n      }\n    } else if (schema.type === \"tuple\") {\n      fallbacks = [];\n      for (let key = 0; key < schema.items.length; key++) {\n        fallbacks.push(getFallbacks(schema.items[key]));\n      }\n    }\n  }\n  return fallbacks;\n}\n\n// src/methods/getFallbacks/getFallbacksAsync.ts\nasync function getFallbacksAsync(schema) {\n  let fallbacks;\n  if (schema.fallback) {\n    fallbacks = await getFallbackAsync(schema);\n  } else if (\"type\" in schema) {\n    if (schema.type === \"object\") {\n      fallbacks = {};\n      await Promise.all(\n        Object.entries(schema.entries).map(async ([key, schema2]) => {\n          fallbacks[key] = await getFallbacksAsync(schema2);\n        })\n      );\n    } else if (schema.type === \"tuple\") {\n      fallbacks = await Promise.all(\n        schema.items.map((schema2) => getFallbacksAsync(schema2))\n      );\n    }\n  }\n  return fallbacks;\n}\n\n// src/methods/is/is.ts\nfunction is(schema, input, info) {\n  return !schema._parse(input, {\n    abortEarly: true,\n    skipPipe: info?.skipPipe\n  }).issues;\n}\n\n// src/schemas/any/any.ts\nfunction any(pipe) {\n  return {\n    type: \"any\",\n    async: false,\n    pipe,\n    _parse(input, info) {\n      return pipeResult(input, this.pipe, info, \"any\");\n    }\n  };\n}\n\n// src/schemas/any/anyAsync.ts\nfunction anyAsync(pipe) {\n  return {\n    type: \"any\",\n    async: true,\n    pipe,\n    async _parse(input, info) {\n      return pipeResultAsync(input, this.pipe, info, \"any\");\n    }\n  };\n}\n\n// src/schemas/array/array.ts\nfunction array(item, arg2, arg3) {\n  const [message = \"Invalid type\", pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"array\",\n    async: false,\n    item,\n    message,\n    pipe,\n    _parse(input, info) {\n      if (!Array.isArray(input)) {\n        return schemaIssue(info, \"type\", \"array\", this.message, input);\n      }\n      let typed = true;\n      let issues;\n      const output = [];\n      for (let key = 0; key < input.length; key++) {\n        const value2 = input[key];\n        const result = this.item._parse(value2, info);\n        if (result.issues) {\n          const pathItem = {\n            type: \"array\",\n            input,\n            key,\n            value: value2\n          };\n          for (const issue of result.issues) {\n            if (issue.path) {\n              issue.path.unshift(pathItem);\n            } else {\n              issue.path = [pathItem];\n            }\n            issues?.push(issue);\n          }\n          if (!issues) {\n            issues = result.issues;\n          }\n          if (info?.abortEarly) {\n            typed = false;\n            break;\n          }\n        }\n        if (!result.typed) {\n          typed = false;\n        }\n        output.push(result.output);\n      }\n      if (typed) {\n        return pipeResult(\n          output,\n          this.pipe,\n          info,\n          \"array\",\n          issues\n        );\n      }\n      return parseResult(false, output, issues);\n    }\n  };\n}\n\n// src/schemas/array/arrayAsync.ts\nfunction arrayAsync(item, arg2, arg3) {\n  const [message = \"Invalid type\", pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"array\",\n    async: true,\n    item,\n    message,\n    pipe,\n    async _parse(input, info) {\n      if (!Array.isArray(input)) {\n        return schemaIssue(info, \"type\", \"array\", this.message, input);\n      }\n      let typed = true;\n      let issues;\n      const output = [];\n      await Promise.all(\n        input.map(async (value2, key) => {\n          if (!(info?.abortEarly && issues)) {\n            const result = await this.item._parse(value2, info);\n            if (!(info?.abortEarly && issues)) {\n              if (result.issues) {\n                const pathItem = {\n                  type: \"array\",\n                  input,\n                  key,\n                  value: value2\n                };\n                for (const issue of result.issues) {\n                  if (issue.path) {\n                    issue.path.unshift(pathItem);\n                  } else {\n                    issue.path = [pathItem];\n                  }\n                  issues?.push(issue);\n                }\n                if (!issues) {\n                  issues = result.issues;\n                }\n                if (info?.abortEarly) {\n                  typed = false;\n                  throw null;\n                }\n              }\n              if (!result.typed) {\n                typed = false;\n              }\n              output[key] = result.output;\n            }\n          }\n        })\n      ).catch(() => null);\n      if (typed) {\n        return pipeResultAsync(\n          output,\n          this.pipe,\n          info,\n          \"array\",\n          issues\n        );\n      }\n      return parseResult(false, output, issues);\n    }\n  };\n}\n\n// src/schemas/bigint/bigint.ts\nfunction bigint(arg1, arg2) {\n  const [message = \"Invalid type\", pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"bigint\",\n    async: false,\n    message,\n    pipe,\n    _parse(input, info) {\n      if (typeof input !== \"bigint\") {\n        return schemaIssue(info, \"type\", \"bigint\", this.message, input);\n      }\n      return pipeResult(input, this.pipe, info, \"bigint\");\n    }\n  };\n}\n\n// src/schemas/bigint/bigintAsync.ts\nfunction bigintAsync(arg1, arg2) {\n  const [message = \"Invalid type\", pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"bigint\",\n    async: true,\n    message,\n    pipe,\n    async _parse(input, info) {\n      if (typeof input !== \"bigint\") {\n        return schemaIssue(info, \"type\", \"bigint\", this.message, input);\n      }\n      return pipeResultAsync(input, this.pipe, info, \"bigint\");\n    }\n  };\n}\n\n// src/schemas/blob/blob.ts\nfunction blob(arg1, arg2) {\n  const [message = \"Invalid type\", pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"blob\",\n    async: false,\n    message,\n    pipe,\n    _parse(input, info) {\n      if (!(input instanceof Blob)) {\n        return schemaIssue(info, \"type\", \"blob\", this.message, input);\n      }\n      return pipeResult(input, this.pipe, info, \"blob\");\n    }\n  };\n}\n\n// src/schemas/blob/blobAsync.ts\nfunction blobAsync(arg1, arg2) {\n  const [message = \"Invalid type\", pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"blob\",\n    async: true,\n    message,\n    pipe,\n    async _parse(input, info) {\n      if (!(input instanceof Blob)) {\n        return schemaIssue(info, \"type\", \"blob\", this.message, input);\n      }\n      return pipeResultAsync(input, this.pipe, info, \"blob\");\n    }\n  };\n}\n\n// src/schemas/boolean/boolean.ts\nfunction boolean(arg1, arg2) {\n  const [message = \"Invalid type\", pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"boolean\",\n    async: false,\n    message,\n    pipe,\n    _parse(input, info) {\n      if (typeof input !== \"boolean\") {\n        return schemaIssue(info, \"type\", \"boolean\", this.message, input);\n      }\n      return pipeResult(input, this.pipe, info, \"boolean\");\n    }\n  };\n}\n\n// src/schemas/boolean/booleanAsync.ts\nfunction booleanAsync(arg1, arg2) {\n  const [message = \"Invalid type\", pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"boolean\",\n    async: true,\n    message,\n    pipe,\n    async _parse(input, info) {\n      if (typeof input !== \"boolean\") {\n        return schemaIssue(info, \"type\", \"boolean\", this.message, input);\n      }\n      return pipeResultAsync(input, this.pipe, info, \"boolean\");\n    }\n  };\n}\n\n// src/schemas/date/date.ts\nfunction date(arg1, arg2) {\n  const [message = \"Invalid type\", pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"date\",\n    async: false,\n    message,\n    pipe,\n    _parse(input, info) {\n      if (!(input instanceof Date) || isNaN(input.getTime())) {\n        return schemaIssue(info, \"type\", \"date\", this.message, input);\n      }\n      return pipeResult(input, this.pipe, info, \"date\");\n    }\n  };\n}\n\n// src/schemas/date/dateAsync.ts\nfunction dateAsync(arg1, arg2) {\n  const [message = \"Invalid type\", pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"date\",\n    async: true,\n    message,\n    pipe,\n    async _parse(input, info) {\n      if (!(input instanceof Date) || isNaN(input.getTime())) {\n        return schemaIssue(info, \"type\", \"date\", this.message, input);\n      }\n      return pipeResultAsync(input, this.pipe, info, \"date\");\n    }\n  };\n}\n\n// src/schemas/enum/enum.ts\nfunction enum_(enum_2, message = \"Invalid type\") {\n  return {\n    type: \"enum\",\n    async: false,\n    enum: enum_2,\n    message,\n    _parse(input, info) {\n      if (!Object.values(this.enum).includes(input)) {\n        return schemaIssue(info, \"type\", \"enum\", this.message, input);\n      }\n      return parseResult(true, input);\n    }\n  };\n}\nvar nativeEnum = enum_;\n\n// src/schemas/enum/enumAsync.ts\nfunction enumAsync(enum_2, message = \"Invalid type\") {\n  return {\n    type: \"enum\",\n    async: true,\n    enum: enum_2,\n    message,\n    async _parse(input, info) {\n      if (!Object.values(this.enum).includes(input)) {\n        return schemaIssue(info, \"type\", \"enum\", this.message, input);\n      }\n      return parseResult(true, input);\n    }\n  };\n}\nvar nativeEnumAsync = enumAsync;\n\n// src/schemas/instance/instance.ts\nfunction instance(class_, arg2, arg3) {\n  const [message = \"Invalid type\", pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"instance\",\n    async: false,\n    class: class_,\n    message,\n    pipe,\n    _parse(input, info) {\n      if (!(input instanceof this.class)) {\n        return schemaIssue(info, \"type\", \"instance\", this.message, input);\n      }\n      return pipeResult(input, this.pipe, info, \"instance\");\n    }\n  };\n}\n\n// src/schemas/instance/instanceAsync.ts\nfunction instanceAsync(class_, arg2, arg3) {\n  const [message = \"Invalid type\", pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"instance\",\n    async: true,\n    class: class_,\n    message,\n    pipe,\n    async _parse(input, info) {\n      if (!(input instanceof this.class)) {\n        return schemaIssue(info, \"type\", \"instance\", this.message, input);\n      }\n      return pipeResultAsync(input, this.pipe, info, \"instance\");\n    }\n  };\n}\n\n// src/schemas/intersect/utils/mergeOutputs/mergeOutputs.ts\nfunction mergeOutputs(output1, output2) {\n  if (typeof output1 === typeof output2) {\n    if (output1 === output2 || output1 instanceof Date && output2 instanceof Date && +output1 === +output2) {\n      return { output: output1 };\n    }\n    if (Array.isArray(output1) && Array.isArray(output2)) {\n      if (output1.length === output2.length) {\n        const array2 = [];\n        for (let index = 0; index < output1.length; index++) {\n          const result = mergeOutputs(output1[index], output2[index]);\n          if (result.invalid) {\n            return result;\n          }\n          array2.push(result.output);\n        }\n        return { output: array2 };\n      }\n      return { invalid: true };\n    }\n    if (output1 && output2 && output1.constructor === Object && output2.constructor === Object) {\n      const object2 = { ...output1, ...output2 };\n      for (const key in output1) {\n        if (key in output2) {\n          const result = mergeOutputs(output1[key], output2[key]);\n          if (result.invalid) {\n            return result;\n          }\n          object2[key] = result.output;\n        }\n      }\n      return { output: object2 };\n    }\n  }\n  return { invalid: true };\n}\n\n// src/schemas/intersect/intersect.ts\nfunction intersect(options, arg2, arg3) {\n  const [message = \"Invalid type\", pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"intersect\",\n    async: false,\n    options,\n    message,\n    pipe,\n    _parse(input, info) {\n      let typed = true;\n      let issues;\n      let output;\n      const outputs = [];\n      for (const schema of this.options) {\n        const result = schema._parse(input, info);\n        if (result.issues) {\n          if (issues) {\n            for (const issue of result.issues) {\n              issues.push(issue);\n            }\n          } else {\n            issues = result.issues;\n          }\n          if (info?.abortEarly) {\n            typed = false;\n            break;\n          }\n        }\n        if (!result.typed) {\n          typed = false;\n        }\n        outputs.push(result.output);\n      }\n      if (typed) {\n        output = outputs[0];\n        for (let index = 1; index < outputs.length; index++) {\n          const result = mergeOutputs(output, outputs[index]);\n          if (result.invalid) {\n            return schemaIssue(info, \"type\", \"intersect\", this.message, input);\n          }\n          output = result.output;\n        }\n        return pipeResult(output, this.pipe, info, \"intersect\", issues);\n      }\n      return parseResult(false, output, issues);\n    }\n  };\n}\nvar intersection = intersect;\n\n// src/schemas/literal/literal.ts\nfunction literal(literal2, message = \"Invalid type\") {\n  return {\n    type: \"literal\",\n    async: false,\n    literal: literal2,\n    message,\n    _parse(input, info) {\n      if (input !== this.literal) {\n        return schemaIssue(info, \"type\", \"literal\", this.message, input);\n      }\n      return parseResult(true, input);\n    }\n  };\n}\n\n// src/schemas/literal/literalAsync.ts\nfunction literalAsync(literal2, message = \"Invalid type\") {\n  return {\n    type: \"literal\",\n    async: true,\n    literal: literal2,\n    message,\n    async _parse(input, info) {\n      if (input !== this.literal) {\n        return schemaIssue(info, \"type\", \"literal\", this.message, input);\n      }\n      return parseResult(true, input);\n    }\n  };\n}\n\n// src/schemas/map/map.ts\nfunction map(key, value2, arg3, arg4) {\n  const [message = \"Invalid type\", pipe] = defaultArgs(arg3, arg4);\n  return {\n    type: \"map\",\n    async: false,\n    key,\n    value: value2,\n    message,\n    pipe,\n    _parse(input, info) {\n      if (!(input instanceof Map)) {\n        return schemaIssue(info, \"type\", \"map\", this.message, input);\n      }\n      let typed = true;\n      let issues;\n      const output = /* @__PURE__ */ new Map();\n      for (const [inputKey, inputValue] of input.entries()) {\n        let pathItem;\n        const keyResult = this.key._parse(inputKey, {\n          origin: \"key\",\n          abortEarly: info?.abortEarly,\n          abortPipeEarly: info?.abortPipeEarly,\n          skipPipe: info?.skipPipe\n        });\n        if (keyResult.issues) {\n          pathItem = {\n            type: \"map\",\n            input,\n            key: inputKey,\n            value: inputValue\n          };\n          for (const issue of keyResult.issues) {\n            if (issue.path) {\n              issue.path.unshift(pathItem);\n            } else {\n              issue.path = [pathItem];\n            }\n            issues?.push(issue);\n          }\n          if (!issues) {\n            issues = keyResult.issues;\n          }\n          if (info?.abortEarly) {\n            typed = false;\n            break;\n          }\n        }\n        const valueResult = this.value._parse(inputValue, info);\n        if (valueResult.issues) {\n          pathItem = pathItem || {\n            type: \"map\",\n            input,\n            key: inputKey,\n            value: inputValue\n          };\n          for (const issue of valueResult.issues) {\n            if (issue.path) {\n              issue.path.unshift(pathItem);\n            } else {\n              issue.path = [pathItem];\n            }\n            issues?.push(issue);\n          }\n          if (!issues) {\n            issues = valueResult.issues;\n          }\n          if (info?.abortEarly) {\n            typed = false;\n            break;\n          }\n        }\n        if (!keyResult.typed || !valueResult.typed) {\n          typed = false;\n        }\n        output.set(keyResult.output, valueResult.output);\n      }\n      if (typed) {\n        return pipeResult(output, this.pipe, info, \"map\", issues);\n      }\n      return parseResult(false, output, issues);\n    }\n  };\n}\n\n// src/schemas/map/mapAsync.ts\nfunction mapAsync(key, value2, arg3, arg4) {\n  const [message = \"Invalid type\", pipe] = defaultArgs(arg3, arg4);\n  return {\n    type: \"map\",\n    async: true,\n    key,\n    value: value2,\n    message,\n    pipe,\n    async _parse(input, info) {\n      if (!(input instanceof Map)) {\n        return schemaIssue(info, \"type\", \"map\", this.message, input);\n      }\n      let typed = true;\n      let issues;\n      const output = /* @__PURE__ */ new Map();\n      await Promise.all(\n        Array.from(input.entries()).map(async ([inputKey, inputValue]) => {\n          let pathItem;\n          const [keyResult, valueResult] = await Promise.all(\n            [\n              { schema: this.key, value: inputKey, origin: \"key\" },\n              { schema: this.value, value: inputValue, origin: \"value\" }\n            ].map(async ({ schema, value: value3, origin }) => {\n              if (!(info?.abortEarly && issues)) {\n                const result = await schema._parse(value3, {\n                  origin,\n                  abortEarly: info?.abortEarly,\n                  abortPipeEarly: info?.abortPipeEarly,\n                  skipPipe: info?.skipPipe\n                });\n                if (!(info?.abortEarly && issues)) {\n                  if (result.issues) {\n                    pathItem = pathItem || {\n                      type: \"map\",\n                      input,\n                      key: inputKey,\n                      value: inputValue\n                    };\n                    for (const issue of result.issues) {\n                      if (issue.path) {\n                        issue.path.unshift(pathItem);\n                      } else {\n                        issue.path = [pathItem];\n                      }\n                      issues?.push(issue);\n                    }\n                    if (!issues) {\n                      issues = result.issues;\n                    }\n                    if (info?.abortEarly) {\n                      throw null;\n                    }\n                  }\n                  return result;\n                }\n              }\n            })\n          ).catch(() => []);\n          if (!keyResult?.typed || !valueResult?.typed) {\n            typed = false;\n          }\n          if (keyResult && valueResult) {\n            output.set(keyResult.output, valueResult.output);\n          }\n        })\n      );\n      if (typed) {\n        return pipeResultAsync(output, this.pipe, info, \"map\", issues);\n      }\n      return parseResult(false, output, issues);\n    }\n  };\n}\n\n// src/schemas/nan/nan.ts\nfunction nan(message = \"Invalid type\") {\n  return {\n    type: \"nan\",\n    async: false,\n    message,\n    _parse(input, info) {\n      if (!Number.isNaN(input)) {\n        return schemaIssue(info, \"type\", \"nan\", this.message, input);\n      }\n      return parseResult(true, input);\n    }\n  };\n}\n\n// src/schemas/nan/nanAsync.ts\nfunction nanAsync(message = \"Invalid type\") {\n  return {\n    type: \"nan\",\n    async: true,\n    message,\n    async _parse(input, info) {\n      if (!Number.isNaN(input)) {\n        return schemaIssue(info, \"type\", \"nan\", this.message, input);\n      }\n      return parseResult(true, input);\n    }\n  };\n}\n\n// src/schemas/never/never.ts\nfunction never(message = \"Invalid type\") {\n  return {\n    type: \"never\",\n    async: false,\n    message,\n    _parse(input, info) {\n      return schemaIssue(info, \"type\", \"never\", this.message, input);\n    }\n  };\n}\n\n// src/schemas/never/neverAsync.ts\nfunction neverAsync(message = \"Invalid type\") {\n  return {\n    type: \"never\",\n    async: true,\n    message,\n    async _parse(input, info) {\n      return schemaIssue(info, \"type\", \"never\", this.message, input);\n    }\n  };\n}\n\n// src/schemas/nonNullable/nonNullable.ts\nfunction nonNullable(wrapped, message = \"Invalid type\") {\n  return {\n    type: \"non_nullable\",\n    async: false,\n    wrapped,\n    message,\n    _parse(input, info) {\n      if (input === null) {\n        return schemaIssue(info, \"type\", \"non_nullable\", this.message, input);\n      }\n      return this.wrapped._parse(input, info);\n    }\n  };\n}\n\n// src/schemas/nonNullable/nonNullableAsync.ts\nfunction nonNullableAsync(wrapped, message = \"Invalid type\") {\n  return {\n    type: \"non_nullable\",\n    async: true,\n    wrapped,\n    message,\n    async _parse(input, info) {\n      if (input === null) {\n        return schemaIssue(info, \"type\", \"non_nullable\", this.message, input);\n      }\n      return this.wrapped._parse(input, info);\n    }\n  };\n}\n\n// src/schemas/nonNullish/nonNullish.ts\nfunction nonNullish(wrapped, message = \"Invalid type\") {\n  return {\n    type: \"non_nullish\",\n    async: false,\n    wrapped,\n    message,\n    _parse(input, info) {\n      if (input === null || input === void 0) {\n        return schemaIssue(info, \"type\", \"non_nullish\", this.message, input);\n      }\n      return this.wrapped._parse(input, info);\n    }\n  };\n}\n\n// src/schemas/nonNullish/nonNullishAsync.ts\nfunction nonNullishAsync(wrapped, message = \"Invalid type\") {\n  return {\n    type: \"non_nullish\",\n    async: true,\n    wrapped,\n    message,\n    async _parse(input, info) {\n      if (input === null || input === void 0) {\n        return schemaIssue(info, \"type\", \"non_nullish\", this.message, input);\n      }\n      return this.wrapped._parse(input, info);\n    }\n  };\n}\n\n// src/schemas/nonOptional/nonOptional.ts\nfunction nonOptional(wrapped, message = \"Invalid type\") {\n  return {\n    type: \"non_optional\",\n    async: false,\n    wrapped,\n    message,\n    _parse(input, info) {\n      if (input === void 0) {\n        return schemaIssue(info, \"type\", \"non_optional\", this.message, input);\n      }\n      return this.wrapped._parse(input, info);\n    }\n  };\n}\n\n// src/schemas/nonOptional/nonOptionalAsync.ts\nfunction nonOptionalAsync(wrapped, message = \"Invalid type\") {\n  return {\n    type: \"non_optional\",\n    async: true,\n    wrapped,\n    message,\n    async _parse(input, info) {\n      if (input === void 0) {\n        return schemaIssue(info, \"type\", \"non_optional\", this.message, input);\n      }\n      return this.wrapped._parse(input, info);\n    }\n  };\n}\n\n// src/schemas/nullable/nullable.ts\nfunction nullable(wrapped, default_) {\n  return {\n    type: \"nullable\",\n    async: false,\n    wrapped,\n    default: default_,\n    _parse(input, info) {\n      if (input === null) {\n        const override = getDefault(this);\n        if (override === void 0) {\n          return parseResult(true, input);\n        }\n        input = override;\n      }\n      return this.wrapped._parse(input, info);\n    }\n  };\n}\n\n// src/schemas/nullable/nullableAsync.ts\nfunction nullableAsync(wrapped, default_) {\n  return {\n    type: \"nullable\",\n    async: true,\n    wrapped,\n    default: default_,\n    async _parse(input, info) {\n      if (input === null) {\n        const override = await getDefaultAsync(this);\n        if (override === void 0) {\n          return parseResult(true, input);\n        }\n        input = override;\n      }\n      return this.wrapped._parse(input, info);\n    }\n  };\n}\n\n// src/schemas/nullish/nullish.ts\nfunction nullish(wrapped, default_) {\n  return {\n    type: \"nullish\",\n    async: false,\n    wrapped,\n    default: default_,\n    _parse(input, info) {\n      if (input === null || input === void 0) {\n        const override = getDefault(this);\n        if (override === void 0) {\n          return parseResult(true, input);\n        }\n        input = override;\n      }\n      return this.wrapped._parse(input, info);\n    }\n  };\n}\n\n// src/schemas/nullish/nullishAsync.ts\nfunction nullishAsync(wrapped, default_) {\n  return {\n    type: \"nullish\",\n    async: true,\n    wrapped,\n    default: default_,\n    async _parse(input, info) {\n      if (input === null || input === void 0) {\n        const override = await getDefaultAsync(this);\n        if (override === void 0) {\n          return parseResult(true, input);\n        }\n        input = override;\n      }\n      return this.wrapped._parse(input, info);\n    }\n  };\n}\n\n// src/schemas/null/null.ts\nfunction null_(message = \"Invalid type\") {\n  return {\n    type: \"null\",\n    async: false,\n    message,\n    _parse(input, info) {\n      if (input !== null) {\n        return schemaIssue(info, \"type\", \"null\", this.message, input);\n      }\n      return parseResult(true, input);\n    }\n  };\n}\nvar nullType = null_;\n\n// src/schemas/null/nullAsync.ts\nfunction nullAsync(message = \"Invalid type\") {\n  return {\n    type: \"null\",\n    async: true,\n    message,\n    async _parse(input, info) {\n      if (input !== null) {\n        return schemaIssue(info, \"type\", \"null\", this.message, input);\n      }\n      return parseResult(true, input);\n    }\n  };\n}\nvar nullTypeAsync = nullAsync;\n\n// src/schemas/number/number.ts\nfunction number(arg1, arg2) {\n  const [message = \"Invalid type\", pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"number\",\n    async: false,\n    message,\n    pipe,\n    _parse(input, info) {\n      if (typeof input !== \"number\" || isNaN(input)) {\n        return schemaIssue(info, \"type\", \"number\", this.message, input);\n      }\n      return pipeResult(input, this.pipe, info, \"number\");\n    }\n  };\n}\n\n// src/schemas/number/numberAsync.ts\nfunction numberAsync(arg1, arg2) {\n  const [message = \"Invalid type\", pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"number\",\n    async: true,\n    message,\n    pipe,\n    async _parse(input, info) {\n      if (typeof input !== \"number\" || isNaN(input)) {\n        return schemaIssue(info, \"type\", \"number\", this.message, input);\n      }\n      return pipeResultAsync(input, this.pipe, info, \"number\");\n    }\n  };\n}\n\n// src/schemas/object/object.ts\nfunction object(entries, arg2, arg3, arg4) {\n  const [rest, message = \"Invalid type\", pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  let cachedEntries;\n  return {\n    type: \"object\",\n    async: false,\n    entries,\n    rest,\n    message,\n    pipe,\n    _parse(input, info) {\n      if (!input || typeof input !== \"object\") {\n        return schemaIssue(info, \"type\", \"object\", this.message, input);\n      }\n      cachedEntries = cachedEntries || Object.entries(this.entries);\n      let typed = true;\n      let issues;\n      const output = {};\n      for (const [key, schema] of cachedEntries) {\n        const value2 = input[key];\n        const result = schema._parse(value2, info);\n        if (result.issues) {\n          const pathItem = {\n            type: \"object\",\n            input,\n            key,\n            value: value2\n          };\n          for (const issue of result.issues) {\n            if (issue.path) {\n              issue.path.unshift(pathItem);\n            } else {\n              issue.path = [pathItem];\n            }\n            issues?.push(issue);\n          }\n          if (!issues) {\n            issues = result.issues;\n          }\n          if (info?.abortEarly) {\n            typed = false;\n            break;\n          }\n        }\n        if (!result.typed) {\n          typed = false;\n        }\n        if (result.output !== void 0 || key in input) {\n          output[key] = result.output;\n        }\n      }\n      if (this.rest && !(info?.abortEarly && issues)) {\n        for (const key in input) {\n          if (!(key in this.entries)) {\n            const value2 = input[key];\n            const result = this.rest._parse(value2, info);\n            if (result.issues) {\n              const pathItem = {\n                type: \"object\",\n                input,\n                key,\n                value: value2\n              };\n              for (const issue of result.issues) {\n                if (issue.path) {\n                  issue.path.unshift(pathItem);\n                } else {\n                  issue.path = [pathItem];\n                }\n                issues?.push(issue);\n              }\n              if (!issues) {\n                issues = result.issues;\n              }\n              if (info?.abortEarly) {\n                typed = false;\n                break;\n              }\n            }\n            if (!result.typed) {\n              typed = false;\n            }\n            output[key] = result.output;\n          }\n        }\n      }\n      if (typed) {\n        return pipeResult(\n          output,\n          this.pipe,\n          info,\n          \"object\",\n          issues\n        );\n      }\n      return parseResult(false, output, issues);\n    }\n  };\n}\n\n// src/schemas/object/objectAsync.ts\nfunction objectAsync(entries, arg2, arg3, arg4) {\n  const [rest, message = \"Invalid type\", pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  let cachedEntries;\n  return {\n    type: \"object\",\n    async: true,\n    entries,\n    rest,\n    message,\n    pipe,\n    async _parse(input, info) {\n      if (!input || typeof input !== \"object\") {\n        return schemaIssue(info, \"type\", \"object\", this.message, input);\n      }\n      cachedEntries = cachedEntries || Object.entries(this.entries);\n      let typed = true;\n      let issues;\n      const output = {};\n      await Promise.all([\n        Promise.all(\n          cachedEntries.map(async ([key, schema]) => {\n            if (!(info?.abortEarly && issues)) {\n              const value2 = input[key];\n              const result = await schema._parse(value2, info);\n              if (!(info?.abortEarly && issues)) {\n                if (result.issues) {\n                  const pathItem = {\n                    type: \"object\",\n                    input,\n                    key,\n                    value: value2\n                  };\n                  for (const issue of result.issues) {\n                    if (issue.path) {\n                      issue.path.unshift(pathItem);\n                    } else {\n                      issue.path = [pathItem];\n                    }\n                    issues?.push(issue);\n                  }\n                  if (!issues) {\n                    issues = result.issues;\n                  }\n                  if (info?.abortEarly) {\n                    typed = false;\n                    throw null;\n                  }\n                }\n                if (!result.typed) {\n                  typed = false;\n                }\n                if (result.output !== void 0 || key in input) {\n                  output[key] = result.output;\n                }\n              }\n            }\n          })\n        ),\n        this.rest && Promise.all(\n          Object.entries(input).map(async ([key, value2]) => {\n            if (!(info?.abortEarly && issues)) {\n              if (!(key in this.entries)) {\n                const result = await this.rest._parse(value2, info);\n                if (!(info?.abortEarly && issues)) {\n                  if (result.issues) {\n                    const pathItem = {\n                      type: \"object\",\n                      input,\n                      key,\n                      value: value2\n                    };\n                    for (const issue of result.issues) {\n                      if (issue.path) {\n                        issue.path.unshift(pathItem);\n                      } else {\n                        issue.path = [pathItem];\n                      }\n                      issues?.push(issue);\n                    }\n                    if (!issues) {\n                      issues = result.issues;\n                    }\n                    if (info?.abortEarly) {\n                      typed = false;\n                      throw null;\n                    }\n                  }\n                  if (!result.typed) {\n                    typed = false;\n                  }\n                  output[key] = result.output;\n                }\n              }\n            }\n          })\n        )\n      ]).catch(() => null);\n      if (typed) {\n        return pipeResultAsync(\n          output,\n          this.pipe,\n          info,\n          \"object\",\n          issues\n        );\n      }\n      return parseResult(false, output, issues);\n    }\n  };\n}\n\n// src/schemas/optional/optional.ts\nfunction optional(wrapped, default_) {\n  return {\n    type: \"optional\",\n    async: false,\n    wrapped,\n    default: default_,\n    _parse(input, info) {\n      if (input === void 0) {\n        const override = getDefault(this);\n        if (override === void 0) {\n          return parseResult(true, input);\n        }\n        input = override;\n      }\n      return this.wrapped._parse(input, info);\n    }\n  };\n}\n\n// src/schemas/optional/optionalAsync.ts\nfunction optionalAsync(wrapped, default_) {\n  return {\n    type: \"optional\",\n    async: true,\n    wrapped,\n    default: default_,\n    async _parse(input, info) {\n      if (input === void 0) {\n        const override = await getDefaultAsync(this);\n        if (override === void 0) {\n          return parseResult(true, input);\n        }\n        input = override;\n      }\n      return this.wrapped._parse(input, info);\n    }\n  };\n}\n\n// src/schemas/picklist/picklist.ts\nfunction picklist(options, message = \"Invalid type\") {\n  return {\n    type: \"picklist\",\n    async: false,\n    options,\n    message,\n    _parse(input, info) {\n      if (!this.options.includes(input)) {\n        return schemaIssue(info, \"type\", \"picklist\", this.message, input);\n      }\n      return parseResult(true, input);\n    }\n  };\n}\nvar enumType = picklist;\n\n// src/schemas/picklist/picklistAsync.ts\nfunction picklistAsync(options, message = \"Invalid type\") {\n  return {\n    type: \"picklist\",\n    async: true,\n    options,\n    message,\n    async _parse(input, info) {\n      if (!this.options.includes(input)) {\n        return schemaIssue(info, \"type\", \"picklist\", this.message, input);\n      }\n      return parseResult(true, input);\n    }\n  };\n}\nvar enumTypeAsync = picklistAsync;\n\n// src/schemas/string/string.ts\nfunction string(arg1, arg2) {\n  const [message = \"Invalid type\", pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"string\",\n    async: false,\n    message,\n    pipe,\n    _parse(input, info) {\n      if (typeof input !== \"string\") {\n        return schemaIssue(info, \"type\", \"string\", this.message, input);\n      }\n      return pipeResult(input, this.pipe, info, \"string\");\n    }\n  };\n}\n\n// src/schemas/string/stringAsync.ts\nfunction stringAsync(arg1, arg2) {\n  const [message = \"Invalid type\", pipe] = defaultArgs(arg1, arg2);\n  return {\n    type: \"string\",\n    async: true,\n    message,\n    pipe,\n    async _parse(input, info) {\n      if (typeof input !== \"string\") {\n        return schemaIssue(info, \"type\", \"string\", this.message, input);\n      }\n      return pipeResultAsync(input, this.pipe, info, \"string\");\n    }\n  };\n}\n\n// src/schemas/record/utils/recordArgs/recordArgs.ts\nfunction recordArgs(arg1, arg2, arg3, arg4) {\n  if (typeof arg2 === \"object\" && !Array.isArray(arg2)) {\n    const [message2, pipe2] = defaultArgs(arg3, arg4);\n    return [arg1, arg2, message2, pipe2];\n  }\n  const [message, pipe] = defaultArgs(\n    arg2,\n    arg3\n  );\n  return [string(), arg1, message, pipe];\n}\n\n// src/schemas/record/values.ts\nvar BLOCKED_KEYS = [\"__proto__\", \"prototype\", \"constructor\"];\n\n// src/schemas/record/record.ts\nfunction record(arg1, arg2, arg3, arg4) {\n  const [key, value2, message = \"Invalid type\", pipe] = recordArgs(arg1, arg2, arg3, arg4);\n  return {\n    type: \"record\",\n    async: false,\n    key,\n    value: value2,\n    message,\n    pipe,\n    _parse(input, info) {\n      if (!input || typeof input !== \"object\") {\n        return schemaIssue(info, \"type\", \"record\", this.message, input);\n      }\n      let typed = true;\n      let issues;\n      const output = {};\n      for (const [inputKey, inputValue] of Object.entries(input)) {\n        if (!BLOCKED_KEYS.includes(inputKey)) {\n          let pathItem;\n          const keyResult = this.key._parse(inputKey, {\n            origin: \"key\",\n            abortEarly: info?.abortEarly,\n            abortPipeEarly: info?.abortPipeEarly,\n            skipPipe: info?.skipPipe\n          });\n          if (keyResult.issues) {\n            pathItem = {\n              type: \"record\",\n              input,\n              key: inputKey,\n              value: inputValue\n            };\n            for (const issue of keyResult.issues) {\n              issue.path = [pathItem];\n              issues?.push(issue);\n            }\n            if (!issues) {\n              issues = keyResult.issues;\n            }\n            if (info?.abortEarly) {\n              typed = false;\n              break;\n            }\n          }\n          const valueResult = this.value._parse(inputValue, info);\n          if (valueResult.issues) {\n            pathItem = pathItem || {\n              type: \"record\",\n              input,\n              key: inputKey,\n              value: inputValue\n            };\n            for (const issue of valueResult.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              issues?.push(issue);\n            }\n            if (!issues) {\n              issues = valueResult.issues;\n            }\n            if (info?.abortEarly) {\n              typed = false;\n              break;\n            }\n          }\n          if (!keyResult.typed || !valueResult.typed) {\n            typed = false;\n          }\n          if (keyResult.typed) {\n            output[keyResult.output] = valueResult.output;\n          }\n        }\n      }\n      if (typed) {\n        return pipeResult(\n          output,\n          this.pipe,\n          info,\n          \"record\",\n          issues\n        );\n      }\n      return parseResult(false, output, issues);\n    }\n  };\n}\n\n// src/schemas/record/recordAsync.ts\nfunction recordAsync(arg1, arg2, arg3, arg4) {\n  const [key, value2, message = \"Invalid type\", pipe] = recordArgs(arg1, arg2, arg3, arg4);\n  return {\n    type: \"record\",\n    async: true,\n    key,\n    value: value2,\n    message,\n    pipe,\n    async _parse(input, info) {\n      if (!input || typeof input !== \"object\") {\n        return schemaIssue(info, \"type\", \"record\", this.message, input);\n      }\n      let typed = true;\n      let issues;\n      const output = {};\n      await Promise.all(\n        // Note: `Object.entries(...)` converts each key to a string\n        Object.entries(input).map(async ([inputKey, inputValue]) => {\n          if (!BLOCKED_KEYS.includes(inputKey)) {\n            let pathItem;\n            const [keyResult, valueResult] = await Promise.all(\n              [\n                { schema: this.key, value: inputKey, origin: \"key\" },\n                { schema: this.value, value: inputValue, origin: \"value\" }\n              ].map(async ({ schema, value: value3, origin }) => {\n                if (!(info?.abortEarly && issues)) {\n                  const result = await schema._parse(value3, {\n                    origin,\n                    abortEarly: info?.abortEarly,\n                    abortPipeEarly: info?.abortPipeEarly,\n                    skipPipe: info?.skipPipe\n                  });\n                  if (!(info?.abortEarly && issues)) {\n                    if (result.issues) {\n                      pathItem = pathItem || {\n                        type: \"record\",\n                        input,\n                        key: inputKey,\n                        value: inputValue\n                      };\n                      for (const issue of result.issues) {\n                        if (issue.path) {\n                          issue.path.unshift(pathItem);\n                        } else {\n                          issue.path = [pathItem];\n                        }\n                        issues?.push(issue);\n                      }\n                      if (!issues) {\n                        issues = result.issues;\n                      }\n                      if (info?.abortEarly) {\n                        throw null;\n                      }\n                    }\n                    return result;\n                  }\n                }\n              })\n            ).catch(() => []);\n            if (!keyResult?.typed || !valueResult?.typed) {\n              typed = false;\n            }\n            if (keyResult?.typed && valueResult) {\n              output[keyResult.output] = valueResult.output;\n            }\n          }\n        })\n      );\n      if (typed) {\n        return pipeResultAsync(\n          output,\n          this.pipe,\n          info,\n          \"record\",\n          issues\n        );\n      }\n      return parseResult(false, output, issues);\n    }\n  };\n}\n\n// src/schemas/recursive/recursive.ts\nfunction recursive(getter) {\n  return {\n    type: \"recursive\",\n    async: false,\n    getter,\n    _parse(input, info) {\n      return this.getter()._parse(input, info);\n    }\n  };\n}\n\n// src/schemas/recursive/recursiveAsync.ts\nfunction recursiveAsync(getter) {\n  return {\n    type: \"recursive\",\n    async: true,\n    getter,\n    async _parse(input, info) {\n      return this.getter()._parse(input, info);\n    }\n  };\n}\n\n// src/schemas/set/set.ts\nfunction set(value2, arg2, arg3) {\n  const [message = \"Invalid type\", pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"set\",\n    async: false,\n    value: value2,\n    message,\n    pipe,\n    _parse(input, info) {\n      if (!(input instanceof Set)) {\n        return schemaIssue(info, \"type\", \"set\", this.message, input);\n      }\n      let key = 0;\n      let typed = true;\n      let issues;\n      const output = /* @__PURE__ */ new Set();\n      for (const inputValue of input) {\n        const result = this.value._parse(inputValue, info);\n        if (result.issues) {\n          const pathItem = {\n            type: \"set\",\n            input,\n            key,\n            value: inputValue\n          };\n          for (const issue of result.issues) {\n            if (issue.path) {\n              issue.path.unshift(pathItem);\n            } else {\n              issue.path = [pathItem];\n            }\n            issues?.push(issue);\n          }\n          if (!issues) {\n            issues = result.issues;\n          }\n          if (info?.abortEarly) {\n            typed = false;\n            break;\n          }\n        }\n        if (!result.typed) {\n          typed = false;\n        }\n        output.add(result.output);\n        key++;\n      }\n      if (typed) {\n        return pipeResult(output, this.pipe, info, \"set\", issues);\n      }\n      return parseResult(false, output, issues);\n    }\n  };\n}\n\n// src/schemas/set/setAsync.ts\nfunction setAsync(value2, arg2, arg3) {\n  const [message = \"Invalid type\", pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"set\",\n    async: true,\n    value: value2,\n    message,\n    pipe,\n    async _parse(input, info) {\n      if (!(input instanceof Set)) {\n        return schemaIssue(info, \"type\", \"set\", this.message, input);\n      }\n      let typed = true;\n      let issues;\n      const output = /* @__PURE__ */ new Set();\n      await Promise.all(\n        Array.from(input.values()).map(async (inputValue, key) => {\n          if (!(info?.abortEarly && issues)) {\n            const result = await this.value._parse(inputValue, info);\n            if (!(info?.abortEarly && issues)) {\n              if (result.issues) {\n                const pathItem = {\n                  type: \"set\",\n                  input,\n                  key,\n                  value: inputValue\n                };\n                for (const issue of result.issues) {\n                  if (issue.path) {\n                    issue.path.unshift(pathItem);\n                  } else {\n                    issue.path = [pathItem];\n                  }\n                  issues?.push(issue);\n                }\n                if (!issues) {\n                  issues = result.issues;\n                }\n                if (info?.abortEarly) {\n                  typed = false;\n                  throw null;\n                }\n              }\n              if (!result.typed) {\n                typed = false;\n              }\n              output.add(result.output);\n            }\n          }\n        })\n      ).catch(() => null);\n      if (typed) {\n        return pipeResultAsync(output, this.pipe, info, \"set\", issues);\n      }\n      return parseResult(false, output, issues);\n    }\n  };\n}\n\n// src/schemas/special/special.ts\nfunction special(check, arg2, arg3) {\n  const [message = \"Invalid type\", pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"special\",\n    async: false,\n    check,\n    message,\n    pipe,\n    _parse(input, info) {\n      if (!this.check(input)) {\n        return schemaIssue(info, \"type\", \"special\", this.message, input);\n      }\n      return pipeResult(input, this.pipe, info, \"special\");\n    }\n  };\n}\n\n// src/schemas/special/specialAsync.ts\nfunction specialAsync(check, arg2, arg3) {\n  const [message = \"Invalid type\", pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"special\",\n    async: true,\n    check,\n    message,\n    pipe,\n    async _parse(input, info) {\n      if (!await this.check(input)) {\n        return schemaIssue(info, \"type\", \"special\", this.message, input);\n      }\n      return pipeResultAsync(input, this.pipe, info, \"special\");\n    }\n  };\n}\n\n// src/schemas/symbol/symbol.ts\nfunction symbol(message = \"Invalid type\") {\n  return {\n    type: \"symbol\",\n    async: false,\n    message,\n    _parse(input, info) {\n      if (typeof input !== \"symbol\") {\n        return schemaIssue(info, \"type\", \"symbol\", this.message, input);\n      }\n      return parseResult(true, input);\n    }\n  };\n}\n\n// src/schemas/symbol/symbolAsync.ts\nfunction symbolAsync(message = \"Invalid type\") {\n  return {\n    type: \"symbol\",\n    async: true,\n    message,\n    async _parse(input, info) {\n      if (typeof input !== \"symbol\") {\n        return schemaIssue(info, \"type\", \"symbol\", this.message, input);\n      }\n      return parseResult(true, input);\n    }\n  };\n}\n\n// src/schemas/tuple/tuple.ts\nfunction tuple(items, arg2, arg3, arg4) {\n  const [rest, message = \"Invalid type\", pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  return {\n    type: \"tuple\",\n    async: false,\n    items,\n    rest,\n    message,\n    pipe,\n    _parse(input, info) {\n      if (!Array.isArray(input) || this.items.length > input.length) {\n        return schemaIssue(info, \"type\", \"tuple\", this.message, input);\n      }\n      let typed = true;\n      let issues;\n      const output = [];\n      for (let key = 0; key < this.items.length; key++) {\n        const value2 = input[key];\n        const result = this.items[key]._parse(value2, info);\n        if (result.issues) {\n          const pathItem = {\n            type: \"tuple\",\n            input,\n            key,\n            value: value2\n          };\n          for (const issue of result.issues) {\n            if (issue.path) {\n              issue.path.unshift(pathItem);\n            } else {\n              issue.path = [pathItem];\n            }\n            issues?.push(issue);\n          }\n          if (!issues) {\n            issues = result.issues;\n          }\n          if (info?.abortEarly) {\n            typed = false;\n            break;\n          }\n        }\n        if (!result.typed) {\n          typed = false;\n        }\n        output[key] = result.output;\n      }\n      if (this.rest && !(info?.abortEarly && issues)) {\n        for (let key = this.items.length; key < input.length; key++) {\n          const value2 = input[key];\n          const result = this.rest._parse(value2, info);\n          if (result.issues) {\n            const pathItem = {\n              type: \"tuple\",\n              input,\n              key,\n              value: value2\n            };\n            for (const issue of result.issues) {\n              if (issue.path) {\n                issue.path.unshift(pathItem);\n              } else {\n                issue.path = [pathItem];\n              }\n              issues?.push(issue);\n            }\n            if (!issues) {\n              issues = result.issues;\n            }\n            if (info?.abortEarly) {\n              typed = false;\n              break;\n            }\n          }\n          if (!result.typed) {\n            typed = false;\n          }\n          output[key] = result.output;\n        }\n      }\n      if (typed) {\n        return pipeResult(\n          output,\n          this.pipe,\n          info,\n          \"tuple\",\n          issues\n        );\n      }\n      return parseResult(false, output, issues);\n    }\n  };\n}\n\n// src/schemas/tuple/tupleAsync.ts\nfunction tupleAsync(items, arg2, arg3, arg4) {\n  const [rest, message = \"Invalid type\", pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  return {\n    type: \"tuple\",\n    async: true,\n    items,\n    rest,\n    message,\n    pipe,\n    async _parse(input, info) {\n      if (!Array.isArray(input) || this.items.length > input.length) {\n        return schemaIssue(info, \"type\", \"tuple\", this.message, input);\n      }\n      let typed = true;\n      let issues;\n      const output = [];\n      await Promise.all([\n        // Parse schema of each tuple item\n        Promise.all(\n          this.items.map(async (schema, key) => {\n            if (!(info?.abortEarly && issues)) {\n              const value2 = input[key];\n              const result = await schema._parse(value2, info);\n              if (!(info?.abortEarly && issues)) {\n                if (result.issues) {\n                  const pathItem = {\n                    type: \"tuple\",\n                    input,\n                    key,\n                    value: value2\n                  };\n                  for (const issue of result.issues) {\n                    if (issue.path) {\n                      issue.path.unshift(pathItem);\n                    } else {\n                      issue.path = [pathItem];\n                    }\n                    issues?.push(issue);\n                  }\n                  if (!issues) {\n                    issues = result.issues;\n                  }\n                  if (info?.abortEarly) {\n                    typed = false;\n                    throw null;\n                  }\n                }\n                if (!result.typed) {\n                  typed = false;\n                }\n                output[key] = result.output;\n              }\n            }\n          })\n        ),\n        // If necessary parse schema of each rest item\n        this.rest && Promise.all(\n          input.slice(this.items.length).map(async (value2, index) => {\n            if (!(info?.abortEarly && issues)) {\n              const key = this.items.length + index;\n              const result = await this.rest._parse(value2, info);\n              if (!(info?.abortEarly && issues)) {\n                if (result.issues) {\n                  const pathItem = {\n                    type: \"tuple\",\n                    input,\n                    key,\n                    value: value2\n                  };\n                  for (const issue of result.issues) {\n                    if (issue.path) {\n                      issue.path.unshift(pathItem);\n                    } else {\n                      issue.path = [pathItem];\n                    }\n                    issues?.push(issue);\n                  }\n                  if (!issues) {\n                    issues = result.issues;\n                  }\n                  if (info?.abortEarly) {\n                    typed = false;\n                    throw null;\n                  }\n                }\n                if (!result.typed) {\n                  typed = false;\n                }\n                output[key] = result.output;\n              }\n            }\n          })\n        )\n      ]).catch(() => null);\n      if (typed) {\n        return pipeResultAsync(\n          output,\n          this.pipe,\n          info,\n          \"tuple\",\n          issues\n        );\n      }\n      return parseResult(false, output, issues);\n    }\n  };\n}\n\n// src/schemas/undefined/undefined.ts\nfunction undefined_(message = \"Invalid type\") {\n  return {\n    type: \"undefined\",\n    async: false,\n    message,\n    _parse(input, info) {\n      if (typeof input !== \"undefined\") {\n        return schemaIssue(info, \"type\", \"undefined\", this.message, input);\n      }\n      return parseResult(true, input);\n    }\n  };\n}\nvar undefinedType = undefined_;\n\n// src/schemas/undefined/undefinedAsync.ts\nfunction undefinedAsync(message = \"Invalid type\") {\n  return {\n    type: \"undefined\",\n    async: true,\n    message,\n    async _parse(input, info) {\n      if (typeof input !== \"undefined\") {\n        return schemaIssue(info, \"type\", \"undefined\", this.message, input);\n      }\n      return parseResult(true, input);\n    }\n  };\n}\nvar undefinedTypeAsync = undefinedAsync;\n\n// src/schemas/union/union.ts\nfunction union(options, arg2, arg3) {\n  const [message = \"Invalid type\", pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"union\",\n    async: false,\n    options,\n    message,\n    pipe,\n    _parse(input, info) {\n      let issues;\n      let output;\n      for (const schema of this.options) {\n        const result = schema._parse(input, info);\n        if (result.issues) {\n          if (issues) {\n            for (const issue of result.issues) {\n              issues.push(issue);\n            }\n          } else {\n            issues = result.issues;\n          }\n        } else {\n          output = [result.output];\n          break;\n        }\n      }\n      if (output) {\n        return pipeResult(output[0], this.pipe, info, \"union\");\n      }\n      return schemaIssue(\n        info,\n        \"type\",\n        \"union\",\n        this.message,\n        input,\n        void 0,\n        issues\n      );\n    }\n  };\n}\n\n// src/schemas/union/unionAsync.ts\nfunction unionAsync(options, arg2, arg3) {\n  const [message = \"Invalid type\", pipe] = defaultArgs(arg2, arg3);\n  return {\n    type: \"union\",\n    async: true,\n    options,\n    message,\n    pipe,\n    async _parse(input, info) {\n      let issues;\n      let output;\n      for (const schema of this.options) {\n        const result = await schema._parse(input, info);\n        if (result.issues) {\n          if (issues) {\n            for (const issue of result.issues) {\n              issues.push(issue);\n            }\n          } else {\n            issues = result.issues;\n          }\n        } else {\n          output = [result.output];\n          break;\n        }\n      }\n      if (output) {\n        return pipeResultAsync(output[0], this.pipe, info, \"union\");\n      }\n      return schemaIssue(\n        info,\n        \"type\",\n        \"union\",\n        this.message,\n        input,\n        void 0,\n        issues\n      );\n    }\n  };\n}\n\n// src/schemas/unknown/unknown.ts\nfunction unknown(pipe) {\n  return {\n    type: \"unknown\",\n    async: false,\n    pipe,\n    _parse(input, info) {\n      return pipeResult(input, this.pipe, info, \"unknown\");\n    }\n  };\n}\n\n// src/schemas/unknown/unknownAsync.ts\nfunction unknownAsync(pipe) {\n  return {\n    type: \"unknown\",\n    async: true,\n    pipe,\n    async _parse(input, info) {\n      return pipeResultAsync(input, this.pipe, info, \"unknown\");\n    }\n  };\n}\n\n// src/schemas/variant/variant.ts\nfunction variant(key, options, arg3, arg4) {\n  const [message = \"Invalid type\", pipe] = defaultArgs(arg3, arg4);\n  return {\n    type: \"variant\",\n    async: false,\n    key,\n    options,\n    message,\n    pipe,\n    _parse(input, info) {\n      if (!input || typeof input !== \"object\") {\n        return schemaIssue(info, \"type\", \"variant\", this.message, input);\n      }\n      if (this.key in input) {\n        let issues;\n        let output;\n        const parseOptions = (options2) => {\n          for (const schema of options2) {\n            if (schema.type === \"object\") {\n              const keyResult = schema.entries[this.key]._parse(\n                input[this.key],\n                info\n              );\n              if (!keyResult.issues) {\n                const dataResult = schema._parse(input, info);\n                if (dataResult.issues) {\n                  issues = dataResult.issues;\n                } else {\n                  output = [dataResult.output];\n                  break;\n                }\n              }\n            } else if (schema.type === \"variant\") {\n              parseOptions(schema.options);\n              if (output) {\n                break;\n              }\n            }\n          }\n        };\n        parseOptions(this.options);\n        if (output) {\n          return pipeResult(output[0], this.pipe, info, \"variant\");\n        }\n        if (issues) {\n          return parseResult(false, output, issues);\n        }\n      }\n      return schemaIssue(info, \"type\", \"variant\", this.message, input, [\n        {\n          type: \"object\",\n          input,\n          key: this.key,\n          value: void 0\n        }\n      ]);\n    }\n  };\n}\nvar discriminatedUnion = variant;\n\n// src/schemas/variant/variantAsync.ts\nfunction variantAsync(key, options, arg3, arg4) {\n  const [message = \"Invalid type\", pipe] = defaultArgs(arg3, arg4);\n  return {\n    type: \"variant\",\n    async: true,\n    key,\n    options,\n    message,\n    pipe,\n    async _parse(input, info) {\n      if (!input || typeof input !== \"object\") {\n        return schemaIssue(info, \"type\", \"variant\", this.message, input);\n      }\n      if (this.key in input) {\n        let issues;\n        let output;\n        const parseOptions = async (options2) => {\n          for (const schema of options2) {\n            if (schema.type === \"object\") {\n              const keyResult = await schema.entries[this.key]._parse(\n                input[this.key],\n                info\n              );\n              if (!keyResult.issues) {\n                const dataResult = await schema._parse(input, info);\n                if (dataResult.issues) {\n                  issues = dataResult.issues;\n                } else {\n                  output = [dataResult.output];\n                  break;\n                }\n              }\n            } else if (schema.type === \"variant\") {\n              await parseOptions(schema.options);\n              if (output) {\n                break;\n              }\n            }\n          }\n        };\n        await parseOptions(this.options);\n        if (output) {\n          return pipeResultAsync(output[0], this.pipe, info, \"variant\");\n        }\n        if (issues) {\n          return parseResult(false, output, issues);\n        }\n      }\n      return schemaIssue(info, \"type\", \"variant\", this.message, input, [\n        {\n          type: \"object\",\n          input,\n          key: this.key,\n          value: void 0\n        }\n      ]);\n    }\n  };\n}\nvar discriminatedUnionAsync = variantAsync;\n\n// src/schemas/void/void.ts\nfunction void_(message = \"Invalid type\") {\n  return {\n    type: \"void\",\n    async: false,\n    message,\n    _parse(input, info) {\n      if (typeof input !== \"undefined\") {\n        return schemaIssue(info, \"type\", \"void\", this.message, input);\n      }\n      return parseResult(true, input);\n    }\n  };\n}\nvar voidType = void_;\n\n// src/schemas/void/voidAsync.ts\nfunction voidAsync(message = \"Invalid type\") {\n  return {\n    type: \"void\",\n    async: true,\n    message,\n    async _parse(input, info) {\n      if (typeof input !== \"undefined\") {\n        return schemaIssue(info, \"type\", \"void\", this.message, input);\n      }\n      return parseResult(true, input);\n    }\n  };\n}\nvar voidTypeAsync = voidAsync;\n\n// src/methods/keyof/keyof.ts\nfunction keyof(schema) {\n  return picklist(\n    Object.keys(schema.entries)\n  );\n}\n\n// src/methods/merge/merge.ts\nfunction merge(schemas, arg2, arg3, arg4) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  return object(\n    schemas.reduce(\n      (entries, schema) => ({ ...entries, ...schema.entries }),\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/merge/mergeAsync.ts\nfunction mergeAsync(schemas, arg2, arg3, arg4) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  return objectAsync(\n    schemas.reduce(\n      (entries, schema) => ({ ...entries, ...schema.entries }),\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/omit/omit.ts\nfunction omit(schema, keys, arg3, arg4, arg5) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg3, arg4, arg5);\n  return object(\n    Object.entries(schema.entries).reduce(\n      (entries, [key, schema2]) => keys.includes(key) ? entries : { ...entries, [key]: schema2 },\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/omit/omitAsync.ts\nfunction omitAsync(schema, keys, arg3, arg4, arg5) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg3, arg4, arg5);\n  return objectAsync(\n    Object.entries(schema.entries).reduce(\n      (entries, [key, schema2]) => keys.includes(key) ? entries : { ...entries, [key]: schema2 },\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/parse/parse.ts\nfunction parse(schema, input, info) {\n  const result = schema._parse(input, info);\n  if (result.issues) {\n    throw new ValiError(result.issues);\n  }\n  return result.output;\n}\n\n// src/methods/parse/parseAsync.ts\nasync function parseAsync(schema, input, info) {\n  const result = await schema._parse(input, info);\n  if (result.issues) {\n    throw new ValiError(result.issues);\n  }\n  return result.output;\n}\n\n// src/methods/partial/partial.ts\nfunction partial(schema, arg2, arg3, arg4) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  return object(\n    Object.entries(schema.entries).reduce(\n      (entries, [key, schema2]) => ({\n        ...entries,\n        [key]: optional(schema2)\n      }),\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/partial/partialAsync.ts\nfunction partialAsync(schema, arg2, arg3, arg4) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  return objectAsync(\n    Object.entries(schema.entries).reduce(\n      (entries, [key, schema2]) => ({\n        ...entries,\n        [key]: optionalAsync(schema2)\n      }),\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/passthrough/passthrough.ts\nfunction passthrough(schema) {\n  return {\n    ...schema,\n    _parse(input, info) {\n      const result = schema._parse(input, info);\n      if (result.typed) {\n        result.output = { ...input, ...result.output };\n      }\n      return result;\n    }\n  };\n}\n\n// src/methods/passthrough/passthroughAsync.ts\nfunction passthroughAsync(schema) {\n  return {\n    ...schema,\n    async _parse(input, info) {\n      const result = await schema._parse(input, info);\n      if (result.typed) {\n        result.output = { ...input, ...result.output };\n      }\n      return result;\n    }\n  };\n}\n\n// src/methods/pick/pick.ts\nfunction pick(schema, keys, arg3, arg4, arg5) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg3, arg4, arg5);\n  return object(\n    Object.entries(schema.entries).reduce(\n      (entries, [key, schema2]) => keys.includes(key) ? { ...entries, [key]: schema2 } : entries,\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/pick/pickAsync.ts\nfunction pickAsync(schema, keys, arg3, arg4, arg5) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg3, arg4, arg5);\n  return objectAsync(\n    Object.entries(schema.entries).reduce(\n      (entries, [key, schema2]) => keys.includes(key) ? { ...entries, [key]: schema2 } : entries,\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/required/required.ts\nfunction required(schema, arg2, arg3, arg4) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  return object(\n    Object.entries(schema.entries).reduce(\n      (entries, [key, schema2]) => ({\n        ...entries,\n        [key]: nonOptional(schema2)\n      }),\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/required/requiredAsync.ts\nfunction requiredAsync(schema, arg2, arg3, arg4) {\n  const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n  return objectAsync(\n    Object.entries(schema.entries).reduce(\n      (entries, [key, schema2]) => ({\n        ...entries,\n        [key]: nonOptionalAsync(schema2)\n      }),\n      {}\n    ),\n    rest,\n    message,\n    pipe\n  );\n}\n\n// src/methods/safeParse/safeParse.ts\nfunction safeParse(schema, input, info) {\n  const result = schema._parse(input, info);\n  return {\n    typed: result.typed,\n    success: !result.issues,\n    data: result.output,\n    output: result.output,\n    error: result.issues && new ValiError(result.issues),\n    issues: result.issues\n  };\n}\n\n// src/methods/safeParse/safeParseAsync.ts\nasync function safeParseAsync(schema, input, info) {\n  const result = await schema._parse(input, info);\n  return {\n    typed: result.typed,\n    success: !result.issues,\n    data: result.output,\n    output: result.output,\n    error: result.issues && new ValiError(result.issues),\n    issues: result.issues\n  };\n}\n\n// src/methods/strict/strict.ts\nfunction strict(schema, message = \"Invalid keys\") {\n  return {\n    ...schema,\n    _parse(input, info) {\n      const result = schema._parse(input, info);\n      return !result.issues && Object.keys(input).some((key) => !(key in schema.entries)) ? schemaIssue(info, \"object\", \"strict\", message, input) : result;\n    }\n  };\n}\n\n// src/methods/strict/strictAsync.ts\nfunction strictAsync(schema, message = \"Invalid keys\") {\n  return {\n    ...schema,\n    message,\n    async _parse(input, info) {\n      const result = await schema._parse(input, info);\n      return !result.issues && Object.keys(input).some((key) => !(key in schema.entries)) ? schemaIssue(info, \"object\", \"strict\", message, input) : result;\n    }\n  };\n}\n\n// src/methods/strip/strip.ts\nfunction strip(schema) {\n  let cachedKeys;\n  return {\n    ...schema,\n    _parse(input, info) {\n      const result = schema._parse(input, info);\n      if (result.typed) {\n        cachedKeys = cachedKeys || Object.keys(schema.entries);\n        const output = {};\n        for (const key of cachedKeys) {\n          output[key] = result.output[key];\n        }\n        result.output = output;\n      }\n      return result;\n    }\n  };\n}\n\n// src/methods/strip/stripAsync.ts\nfunction stripAsync(schema) {\n  let cachedKeys;\n  return {\n    ...schema,\n    async _parse(input, info) {\n      const result = await schema._parse(input, info);\n      if (result.typed) {\n        cachedKeys = cachedKeys || Object.keys(schema.entries);\n        const output = {};\n        for (const key of cachedKeys) {\n          output[key] = result.output[key];\n        }\n        result.output = output;\n      }\n      return result;\n    }\n  };\n}\n\n// src/methods/transform/transform.ts\nfunction transform(schema, action, arg1) {\n  return {\n    ...schema,\n    _parse(input, info) {\n      const result = schema._parse(input, info);\n      if (result.typed) {\n        result.output = action(result.output, { issues: result.issues });\n        if (result.issues || !arg1) {\n          return result;\n        }\n        if (Array.isArray(arg1)) {\n          return pipeResult(result.output, arg1, info, typeof result.output);\n        }\n        return arg1._parse(result.output, info);\n      }\n      return result;\n    }\n  };\n}\n\n// src/methods/transform/transformAsync.ts\nfunction transformAsync(schema, action, arg1) {\n  return {\n    ...schema,\n    async: true,\n    async _parse(input, info) {\n      const result = await schema._parse(input, info);\n      if (result.typed) {\n        result.output = await action(result.output, { issues: result.issues });\n        if (result.issues || !arg1) {\n          return result;\n        }\n        if (Array.isArray(arg1)) {\n          return pipeResultAsync(\n            result.output,\n            arg1,\n            info,\n            typeof result.output\n          );\n        }\n        return arg1._parse(result.output, info);\n      }\n      return result;\n    }\n  };\n}\n\n// src/methods/unwrap/unwrap.ts\nfunction unwrap(schema) {\n  return schema.wrapped;\n}\n\n// src/methods/withDefault/withDefault.ts\nfunction withDefault(schema, value2) {\n  return {\n    ...schema,\n    _parse(input, info) {\n      return schema._parse(\n        input === void 0 ? typeof value2 === \"function\" ? value2() : value2 : input,\n        info\n      );\n    }\n  };\n}\nvar useDefault = withDefault;\n\n// src/regex.ts\nvar BIC_REGEX = /^[A-Z]{6}(?!00)[A-Z\\d]{2}(?:[A-Z\\d]{3})?$/u;\nvar CUID2_REGEX = /^[a-z][\\da-z]*$/u;\nvar DECIMAL_REGEX = /^\\d+$/u;\nvar EMAIL_REGEX = /^[\\w+-]+(?:\\.[\\w+-]+)*@[\\da-z]+(?:[.-][\\da-z]+)*\\.[a-z]{2,}$/iu;\nvar EMOJI_REGEX = /^[\\p{Extended_Pictographic}\\p{Emoji_Component}]+$/u;\nvar HEXADECIMAL_REGEX = /^(0h|0x)?[\\da-f]+$/iu;\nvar HEX_COLOR_REGEX = /^#([\\da-f]{3}|[\\da-f]{4}|[\\da-f]{6}|[\\da-f]{8})$/iu;\nvar IMEI_REGEX = /^\\d{2}(?:[ /|-]?\\d{6}){2}[ /|-]?\\d$/u;\nvar IPV4_REGEX = (\n  // eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive\n  /^(?:(?:[1-9]|1\\d|2[0-4])?\\d|25[0-5])(?:\\.(?:(?:[1-9]|1\\d|2[0-4])?\\d|25[0-5])){3}$/u\n);\nvar IPV6_REGEX = /^(?:(?:[\\da-f]{1,4}:){7}[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){1,7}:|(?:[\\da-f]{1,4}:){1,6}:[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){1,5}(?::[\\da-f]{1,4}){1,2}|(?:[\\da-f]{1,4}:){1,4}(?::[\\da-f]{1,4}){1,3}|(?:[\\da-f]{1,4}:){1,3}(?::[\\da-f]{1,4}){1,4}|(?:[\\da-f]{1,4}:){1,2}(?::[\\da-f]{1,4}){1,5}|[\\da-f]{1,4}:(?::[\\da-f]{1,4}){1,6}|:(?:(?::[\\da-f]{1,4}){1,7}|:)|fe80:(?::[\\da-f]{0,4}){0,4}%[\\da-z]+|::(?:f{4}(?::0{1,4})?:)?(?:(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)\\.){3}(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)|(?:[\\da-f]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)\\.){3}(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d))$/iu;\nvar ISO_DATE_REGEX = /^\\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\\d|0[1-9]|3[01])$/u;\nvar ISO_DATE_TIME_REGEX = /^\\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\\d|0[1-9]|3[01])T(?:0\\d|1\\d|2[0-3]):[0-5]\\d$/u;\nvar ISO_TIME_REGEX = /^(?:0\\d|1\\d|2[0-3]):[0-5]\\d$/u;\nvar ISO_TIME_SECOND_REGEX = /^(?:0\\d|1\\d|2[0-3])(?::[0-5]\\d){2}$/u;\nvar ISO_TIMESTAMP_REGEX = /^\\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\\d|0[1-9]|3[01])T(?:0\\d|1\\d|2[0-3])(?::[0-5]\\d){2}\\.\\d{3}Z$/u;\nvar ISO_WEEK_REGEX = /^\\d{4}-W(?:0[1-9]|[1-4]\\d|5[0-3])$/u;\nvar MAC48_REGEX = /^(?:[\\da-f]{2}:){5}[\\da-f]{2}$|^(?:[\\da-f]{2}-){5}[\\da-f]{2}$|^(?:[\\da-f]{4}\\.){2}[\\da-f]{4}$/iu;\nvar MAC64_REGEX = /^(?:[\\da-f]{2}:){7}[\\da-f]{2}$|^(?:[\\da-f]{2}-){7}[\\da-f]{2}$|^(?:[\\da-f]{4}\\.){3}[\\da-f]{4}$|^(?:[\\da-f]{4}:){3}[\\da-f]{4}$/iu;\nvar OCTAL_REGEX = /^(0o)?[0-7]+$/iu;\nvar ULID_REGEX = /^[\\da-hjkmnp-tv-z]{26}$/iu;\nvar UUID_REGEX = /^[\\da-f]{8}(?:-[\\da-f]{4}){3}-[\\da-f]{12}$/iu;\n\n// src/transformations/toCustom/toCustom.ts\nfunction toCustom(action) {\n  return {\n    type: \"to_custom\",\n    async: false,\n    _parse(input) {\n      return actionOutput(action(input));\n    }\n  };\n}\n\n// src/transformations/toCustom/toCustomAsync.ts\nfunction toCustomAsync(action) {\n  return {\n    type: \"to_custom\",\n    async: true,\n    async _parse(input) {\n      return actionOutput(await action(input));\n    }\n  };\n}\n\n// src/transformations/toLowerCase/toLowerCase.ts\nfunction toLowerCase() {\n  return {\n    type: \"to_lower_case\",\n    async: false,\n    _parse(input) {\n      return actionOutput(input.toLocaleLowerCase());\n    }\n  };\n}\n\n// src/transformations/toMaxValue/toMaxValue.ts\nfunction toMaxValue(requirement) {\n  return {\n    type: \"to_max_value\",\n    async: false,\n    requirement,\n    _parse(input) {\n      return actionOutput(input > this.requirement ? this.requirement : input);\n    }\n  };\n}\n\n// src/transformations/toMinValue/toMinValue.ts\nfunction toMinValue(requirement) {\n  return {\n    type: \"to_min_value\",\n    async: false,\n    requirement,\n    _parse(input) {\n      return actionOutput(input < this.requirement ? this.requirement : input);\n    }\n  };\n}\n\n// src/transformations/toTrimmed/toTrimmed.ts\nfunction toTrimmed() {\n  return {\n    type: \"to_trimmed\",\n    async: false,\n    _parse(input) {\n      return actionOutput(input.trim());\n    }\n  };\n}\n\n// src/transformations/toTrimmedEnd/toTrimmedEnd.ts\nfunction toTrimmedEnd() {\n  return {\n    type: \"to_trimmed_end\",\n    async: false,\n    _parse(input) {\n      return actionOutput(input.trimEnd());\n    }\n  };\n}\n\n// src/transformations/toTrimmedStart/toTrimmedStart.ts\nfunction toTrimmedStart() {\n  return {\n    type: \"to_trimmed_start\",\n    async: false,\n    _parse(input) {\n      return actionOutput(input.trimStart());\n    }\n  };\n}\n\n// src/transformations/toUpperCase/toUpperCase.ts\nfunction toUpperCase() {\n  return {\n    type: \"to_upper_case\",\n    async: false,\n    _parse(input) {\n      return actionOutput(input.toUpperCase());\n    }\n  };\n}\n\n// src/validations/bic/bic.ts\nfunction bic(message = \"Invalid BIC\") {\n  return {\n    type: \"bic\",\n    async: false,\n    message,\n    requirement: BIC_REGEX,\n    _parse(input) {\n      return !this.requirement.test(input.toUpperCase()) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/bytes/bytes.ts\nfunction bytes(requirement, message = \"Invalid byte length\") {\n  return {\n    type: \"bytes\",\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      return new TextEncoder().encode(input).length !== this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/creditCard/creditCard.ts\nvar SANITIZE_REGEX = /[- ]+/gu;\nvar PROVIDER_REGEX_LIST = [\n  // American Express\n  /^3[47]\\d{13}$/u,\n  // Diners Club\n  /^3(?:0[0-5]|[68]\\d)\\d{11}$/u,\n  // Discover\n  /^6(?:011|5\\d{2})\\d{12,15}$/u,\n  // JCB\n  /^(?:2131|1800|35\\d{3})\\d{11}$/u,\n  // Mastercard\n  /^5[1-5]\\d{2}|(222\\d|22[3-9]\\d|2[3-6]\\d{2}|27[01]\\d|2720)\\d{12}$/u,\n  // UnionPay\n  /^(6[27]\\d{14}|81\\d{14,17})$/u,\n  // Visa\n  /^4\\d{12}(?:\\d{3,6})?$/u\n];\nfunction creditCard(message = \"Invalid credit card\") {\n  return {\n    type: \"credit_card\",\n    async: false,\n    message,\n    requirement: (input) => {\n      const sanitized = input.replace(SANITIZE_REGEX, \"\");\n      return PROVIDER_REGEX_LIST.some((regex2) => regex2.test(sanitized)) && isLuhnAlgo(sanitized);\n    },\n    _parse(input) {\n      return !this.requirement(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/cuid2/cuid2.ts\nfunction cuid2(message = \"Invalid Cuid2\") {\n  return {\n    type: \"cuid2\",\n    async: false,\n    message,\n    requirement: CUID2_REGEX,\n    _parse(input) {\n      return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/custom/custom.ts\nfunction custom(requirement, message = \"Invalid input\") {\n  return {\n    type: \"custom\",\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      return !this.requirement(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/custom/customAsync.ts\nfunction customAsync(requirement, message = \"Invalid input\") {\n  return {\n    type: \"custom\",\n    async: true,\n    message,\n    requirement,\n    async _parse(input) {\n      return !await this.requirement(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/decimal/decimal.ts\nfunction decimal(message = \"Invalid decimal\") {\n  return {\n    type: \"decimal\",\n    async: false,\n    message,\n    requirement: DECIMAL_REGEX,\n    _parse(input) {\n      return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/email/email.ts\nfunction email(message = \"Invalid email\") {\n  return {\n    type: \"email\",\n    async: false,\n    message,\n    requirement: EMAIL_REGEX,\n    _parse(input) {\n      return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/emoji/emoji.ts\nfunction emoji(message = \"Invalid emoji\") {\n  return {\n    type: \"emoji\",\n    async: false,\n    message,\n    requirement: EMOJI_REGEX,\n    _parse(input) {\n      return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/endsWith/endsWith.ts\nfunction endsWith(requirement, message = \"Invalid end\") {\n  return {\n    type: \"ends_with\",\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      return !input.endsWith(this.requirement) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/equal/equal.ts\nfunction equal(requirement, message = \"Invalid input\") {\n  return {\n    type: \"equal\",\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      return input !== this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/excludes/excludes.ts\nfunction excludes(requirement, message = \"Invalid content\") {\n  return {\n    type: \"excludes\",\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      return input.includes(this.requirement) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/finite/finite.ts\nfunction finite(message = \"Invalid finite number\") {\n  return {\n    type: \"finite\",\n    async: false,\n    message,\n    requirement: Number.isFinite,\n    _parse(input) {\n      return !this.requirement(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/hexadecimal/hexadecimal.ts\nfunction hexadecimal(message = \"Invalid hexadecimal\") {\n  return {\n    type: \"hexadecimal\",\n    async: false,\n    message,\n    requirement: HEXADECIMAL_REGEX,\n    _parse(input) {\n      return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/hexColor/hexColor.ts\nfunction hexColor(message = \"Invalid hex color\") {\n  return {\n    type: \"hex_color\",\n    async: false,\n    message,\n    requirement: HEX_COLOR_REGEX,\n    _parse(input) {\n      return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/imei/imei.ts\nfunction imei(message = \"Invalid IMEI\") {\n  return {\n    type: \"imei\",\n    async: false,\n    message,\n    requirement: [IMEI_REGEX, isLuhnAlgo],\n    _parse(input) {\n      return !this.requirement[0].test(input) || !this.requirement[1](input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/includes/includes.ts\nfunction includes(requirement, message = \"Invalid content\") {\n  return {\n    type: \"includes\",\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      return !input.includes(requirement) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/integer/integer.ts\nfunction integer(message = \"Invalid integer\") {\n  return {\n    type: \"integer\",\n    async: false,\n    message,\n    requirement: Number.isInteger,\n    _parse(input) {\n      return !this.requirement(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/ip/ip.ts\nfunction ip(message = \"Invalid IP\") {\n  return {\n    type: \"ip\",\n    async: false,\n    message,\n    requirement: [IPV4_REGEX, IPV6_REGEX],\n    _parse(input) {\n      return !this.requirement[0].test(input) && !this.requirement[1].test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/ipv4/ipv4.ts\nfunction ipv4(message = \"Invalid IPv4\") {\n  return {\n    type: \"ipv4\",\n    async: false,\n    message,\n    requirement: IPV4_REGEX,\n    _parse(input) {\n      return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/ipv6/ipv6.ts\nfunction ipv6(message = \"Invalid IPv6\") {\n  return {\n    type: \"ipv6\",\n    async: false,\n    message,\n    requirement: IPV6_REGEX,\n    _parse(input) {\n      return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/isoDate/isoDate.ts\nfunction isoDate(message = \"Invalid date\") {\n  return {\n    type: \"iso_date\",\n    async: false,\n    message,\n    requirement: ISO_DATE_REGEX,\n    _parse(input) {\n      return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/isoDateTime/isoDateTime.ts\nfunction isoDateTime(message = \"Invalid date-time\") {\n  return {\n    type: \"iso_date_time\",\n    async: false,\n    message,\n    requirement: ISO_DATE_TIME_REGEX,\n    _parse(input) {\n      return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/isoTime/isoTime.ts\nfunction isoTime(message = \"Invalid time\") {\n  return {\n    type: \"iso_time\",\n    async: false,\n    message,\n    requirement: ISO_TIME_REGEX,\n    _parse(input) {\n      return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/isoTimeSecond/isoTimeSecond.ts\nfunction isoTimeSecond(message = \"Invalid time second\") {\n  return {\n    type: \"iso_time_second\",\n    async: false,\n    message,\n    requirement: ISO_TIME_SECOND_REGEX,\n    _parse(input) {\n      return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/isoTimestamp/isoTimestamp.ts\nfunction isoTimestamp(message = \"Invalid timestamp\") {\n  return {\n    type: \"iso_timestamp\",\n    async: false,\n    message,\n    requirement: ISO_TIMESTAMP_REGEX,\n    _parse(input) {\n      return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/isoWeek/isoWeek.ts\nfunction isoWeek(message = \"Invalid week\") {\n  return {\n    type: \"iso_week\",\n    async: false,\n    message,\n    requirement: ISO_WEEK_REGEX,\n    _parse(input) {\n      return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/length/length.ts\nfunction length(requirement, message = \"Invalid length\") {\n  return {\n    type: \"length\",\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      return input.length !== this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/mac/mac.ts\nfunction mac(message = \"Invalid MAC\") {\n  return {\n    type: \"mac\",\n    async: false,\n    message,\n    requirement: [MAC48_REGEX, MAC64_REGEX],\n    _parse(input) {\n      return !this.requirement[0].test(input) && !this.requirement[1].test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/mac48/mac48.ts\nfunction mac48(message = \"Invalid 48 bit MAC\") {\n  return {\n    type: \"mac48\",\n    async: false,\n    message,\n    requirement: MAC48_REGEX,\n    _parse(input) {\n      return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/mac64/mac64.ts\nfunction mac64(message = \"Invalid 64 bit MAC\") {\n  return {\n    type: \"mac64\",\n    async: false,\n    message,\n    requirement: MAC64_REGEX,\n    _parse(input) {\n      return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/maxBytes/maxBytes.ts\nfunction maxBytes(requirement, message = \"Invalid byte length\") {\n  return {\n    type: \"max_bytes\",\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      return new TextEncoder().encode(input).length > this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/maxLength/maxLength.ts\nfunction maxLength(requirement, message = \"Invalid length\") {\n  return {\n    type: \"max_length\",\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      return input.length > this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/maxSize/maxSize.ts\nfunction maxSize(requirement, message = \"Invalid size\") {\n  return {\n    type: \"max_size\",\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      return input.size > this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/maxValue/maxValue.ts\nfunction maxValue(requirement, message = \"Invalid value\") {\n  return {\n    type: \"max_value\",\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      return input > this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\nvar maxRange = maxValue;\n\n// src/validations/minBytes/minBytes.ts\nfunction minBytes(requirement, message = \"Invalid byte length\") {\n  return {\n    type: \"min_bytes\",\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      return new TextEncoder().encode(input).length < this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/mimeType/mimeType.ts\nfunction mimeType(requirement, message = \"Invalid MIME type\") {\n  return {\n    type: \"mime_type\",\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      return !this.requirement.includes(input.type) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/minLength/minLength.ts\nfunction minLength(requirement, message = \"Invalid length\") {\n  return {\n    type: \"min_length\",\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      return input.length < this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/minSize/minSize.ts\nfunction minSize(requirement, message = \"Invalid size\") {\n  return {\n    type: \"min_size\",\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      return input.size < this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/minValue/minValue.ts\nfunction minValue(requirement, message = \"Invalid value\") {\n  return {\n    type: \"min_value\",\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      return input < this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\nvar minRange = minValue;\n\n// src/validations/multipleOf/multipleOf.ts\nfunction multipleOf(requirement, message = \"Invalid multiple\") {\n  return {\n    type: \"multiple_of\",\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      return input % this.requirement !== 0 ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/notBytes/notBytes.ts\nfunction notBytes(requirement, message = \"Invalid byte length\") {\n  return {\n    type: \"not_bytes\",\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      return new TextEncoder().encode(input).length === this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/notLength/notLength.ts\nfunction notLength(requirement, message = \"Invalid length\") {\n  return {\n    type: \"not_length\",\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      return input.length === this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/notSize/notSize.ts\nfunction notSize(requirement, message = \"Invalid size\") {\n  return {\n    type: \"not_size\",\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      return input.size === this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/notValue/notValue.ts\nfunction notValue(requirement, message = \"Invalid value\") {\n  return {\n    type: \"not_value\",\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      return input === this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/octal/octal.ts\nfunction octal(message = \"Invalid octal\") {\n  return {\n    type: \"octal\",\n    async: false,\n    message,\n    requirement: OCTAL_REGEX,\n    _parse(input) {\n      return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/regex/regex.ts\nfunction regex(requirement, message = \"Invalid regex\") {\n  return {\n    type: \"regex\",\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/safeInteger/safeInteger.ts\nfunction safeInteger(message = \"Invalid safe integer\") {\n  return {\n    type: \"safe_integer\",\n    async: false,\n    message,\n    requirement: Number.isSafeInteger,\n    _parse(input) {\n      return !this.requirement(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/size/size.ts\nfunction size(requirement, message = \"Invalid size\") {\n  return {\n    type: \"size\",\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      return input.size !== this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/startsWith/startsWith.ts\nfunction startsWith(requirement, message = \"Invalid start\") {\n  return {\n    type: \"stars_with\",\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      return !input.startsWith(this.requirement) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/ulid/ulid.ts\nfunction ulid(message = \"Invalid ULID\") {\n  return {\n    type: \"ulid\",\n    async: false,\n    message,\n    requirement: ULID_REGEX,\n    _parse(input) {\n      return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/url/url.ts\nfunction url(message = \"Invalid URL\") {\n  return {\n    type: \"url\",\n    async: false,\n    message,\n    requirement(input) {\n      try {\n        new URL(input);\n        return true;\n      } catch {\n        return false;\n      }\n    },\n    _parse(input) {\n      return !this.requirement(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/uuid/uuid.ts\nfunction uuid(message = \"Invalid UUID\") {\n  return {\n    type: \"uuid\",\n    async: false,\n    message,\n    requirement: UUID_REGEX,\n    _parse(input) {\n      return !this.requirement.test(input) ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n// src/validations/value/value.ts\nfunction value(requirement, message = \"Invalid value\") {\n  return {\n    type: \"value\",\n    async: false,\n    message,\n    requirement,\n    _parse(input) {\n      return input !== this.requirement ? actionIssue(this.type, this.message, input, this.requirement) : actionOutput(input);\n    }\n  };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/valibot/dist/index.js\n");

/***/ })

};
;